{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/webscraping-workshop","result":{"data":{"markdownRemark":{"html":"<h1>What / Why?</h1>\n<p>This post is intended to be a supplement for my hackathon workshop about how to do Webscraping in Python. The full source code can be found <a href=\"https://github.com/MurphyPone/webscraping-workshop\">here</a>.  </p>\n<p>The premise of this project is that we're going to scrape iMDb for movie reviews and review usefulness scores for the top 250 or so movies on their list.  With this information we can then perform some naive sentiment analysis to gain some insight into other metrics about movies (other than the average star rating) which might be indicative of the quality of a movie.</p>\n<h1>Setup</h1>\n<p>For this project we're going to use <a href=\"https://www.python.org/downloads/\">Python 3.8+</a> as well as two libraries: pandas (to neatly store our scraped data) and BeautifulSoup (to handle the webscraping itself). They can be installed via pip with the following command:</p>\n<p><code class=\"language-text\">pip install beautifulsoup4 pandas</code></p>\n<p>Additionally, I like to do this kind of explorative data science project within a <a href=\"https://jupyter.org/install\">jupyter notebook</a>.</p>\n<h1>Code!</h1>\n<p>The first step (or cell, if working in a jupyter notebook) will be the import statements of all the libraries we're going to use:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> bs4              <span class=\"token comment\"># to scrape our data</span>\n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd     <span class=\"token comment\"># to store our scraped data</span>\n<span class=\"token keyword\">import</span> requests         <span class=\"token comment\"># to fetch the contents of our target website</span>\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np      <span class=\"token comment\"># to handle Not a Number values</span>\n<span class=\"token keyword\">import</span> csv              <span class=\"token comment\"># to save our pandas DataFrame to a file</span>\n<span class=\"token keyword\">import</span> time             <span class=\"token comment\"># to prevent getting timed out by IMBd</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Notice that when working within a notebook, the values in a cell are cached/saved, so we only have to run this cell once at the beginning of our development session.  We can modify, rearrange, or delete any cells after this first one, and we'll still be able to reference all those imported libraries!</p>\n<h2>Process</h2>\n<p>The webscraping process follows the general approach along these lines:</p>\n<ol>\n<li>identify your target data source,</li>\n<li>examine the page layout and patterns</li>\n<li>write and test your code!</li>\n</ol>\n<h3>Identifying the Target Data Source</h3>\n<p>we want to query the iMDb <a href=\"%22https://www.imdb.com/search/title/?groups=top_1000&#x26;view=simple&#x26;sort=user_rating,desc&#x26;count=250&#x26;start=0%22\">top 1,000 list</a> for movie reviews, star ratings, and usefulness scores.</p>\n<h3>Examining Page Layout and Patterns</h3>\n<p>There's two pages that we're primarily concerned with. The first is the top 1,000 page itself, and the second is the generic page for each individual movie.</p>\n<p>Notice we can display up to 250 movies per page and that other useful arguments gets stored in the above hyperlinked URL.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">https://www.imdb.com/search/title/  &lt;-- the base url\n?groups=top_1000                    &lt;-- which list we want to view\n&amp;view=simple                        &lt;-- compact or full view of each movie listing\n&amp;sort=user_rating,desc              &lt;-- how we want to sort the list \n&amp;count=250                          &lt;-- show 250 (max) movies per page\n&amp;start=0                            &lt;-- start at the 0th (first) movie in the list</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>We could easily change the url arguments to view the next 250 movies by changing the url like so: </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">https://www.imdb.com/search/title/\n?groups=top_1000\n&amp;view=simple\n&amp;sort=user_rating,desc\n&amp;count=250\n&amp;start=251                          &lt;-- start at the 251st movie in the list</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>but for the sake of this workshop, we should have more than enough data from just the top 250 movies.</p>\n<p>Opening you browser's developer console, we can inspect the elements on the page to figure out <em>what</em> type of element each of our desired components is, as well as their possible names, IDs, or any other unique information that might help us isolate the info we want.</p>\n<p>For our first page of interest, we can see that the links to each specific movie page is stored within a <code class=\"language-text\">&lt;span&gt;</code> element with class <code class=\"language-text\">lister-item-header</code>.</p>\n<p>We can use the <code class=\"language-text\">&lt;a&gt;</code> tag nested within this span to get each specific movie's page, from which we can also extract the reviews!</p>\n<p><img src=\"/images/webscraping-1.png\"></p>\n<p>Now take a look at the #1 rated movie, <a href=\"https://www.imdb.com/title/tt0111161/?ref_=adv_li_tt\">The Shawshank Redemption</a>, we can navigate to the user reviews page by clicking the link at the bottom, and once again inspect the structure of the URL to find that its (and all other individual generic movie pages) URL takes the following structure:</p>\n<p><code class=\"language-text\">https://www.imdb.com/title/&lt;MOVIE_ID&gt;/reviews?ref_=tt_ov_rt</code></p>\n<p>If we navigate to that user reviews page, and once again inspect the composition of the page via the developer console, we can see that each movie's review page follows the structure: </p>\n<ul>\n<li>each user review is contained within a <code class=\"language-text\">div</code> element with the class <code class=\"language-text\">imdb-user-review</code></li>\n<li>reviews <em>may</em> have a star rating, </li>\n<li>a date posted, </li>\n<li>the username of the author, </li>\n<li>the text of the review itself, </li>\n<li>and a usefulness score based on how helpful other users found the review. </li>\n</ul>\n<p>Each of these data points are stored in various <code class=\"language-text\">&lt;span&gt;</code>, <code class=\"language-text\">&lt;div&gt;</code>, and <code class=\"language-text\">&lt;a&gt;</code> tags within the parent div with specific class names that we can use to easily identify which pieces of information we want to fetch on a page.</p>\n<p><img src=\"/images/webscraping-2.png\"></p>\n<h3>Writing and Testing Code</h3>\n<p>Now that we have a good handle on the layout and patterns of the page, we can start to write some code to systematically extract the above data points on the review page for each of the 250 movies listed on our main page.</p>\n<p>First, in a new cell, let's define an empty pandas DataFrame with column headings for each data point we want to collect for a movie review:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>columns<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"stars\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"date\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"author\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"review_text\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"url\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"usefulness\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nURL_MOVIES_250 <span class=\"token operator\">=</span> <span class=\"token string\">\"https://www.imdb.com/search/title/?groups=top_1000&amp;view=simple&amp;sort=user_rating,desc&amp;count=250&amp;start=0\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>Next let's define a function which takes in the url for a movie review page, and the DataFrame to append the relevant data points to:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">get_movie_info</span><span class=\"token punctuation\">(</span>the_url<span class=\"token punctuation\">,</span> frame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>the_url<span class=\"token punctuation\">)</span> <span class=\"token comment\"># make a request to the url</span>\n    <span class=\"token keyword\">if</span> response<span class=\"token punctuation\">.</span>status_code <span class=\"token operator\">!=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># anything other than to success code 200 should halt the program</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"GET failed with response code: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>response<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">raise</span>\n    \n    <span class=\"token comment\"># create a BS4 element tree that we can traverse based on the response test according to the html5 library</span>\n    m_soup <span class=\"token operator\">=</span> bs4<span class=\"token punctuation\">.</span>BeautifulSoup<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span> <span class=\"token string\">'html.parser'</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># extract the name of the movie by identifying it by the h3 tag with an itemprop attribute that has the value 'name' by getting the text contents of the element</span>\n    name <span class=\"token operator\">=</span> m_soup<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'h3'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'itemprop'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>contents<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text\n\n    <span class=\"token comment\"># find all the divs containing reviews </span>\n    reviews <span class=\"token operator\">=</span> m_soup<span class=\"token punctuation\">.</span>find_all<span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'imdb-user-review'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># iterate over all the review divs</span>\n    <span class=\"token keyword\">for</span> rev <span class=\"token keyword\">in</span> reviews<span class=\"token punctuation\">:</span>\n\n        <span class=\"token comment\"># 1. attempt to extract a star rating if one is provided in the review</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># find the span containing the score out of 10 that the user gave the movie and extract the text value of that element</span>\n            stars <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>rev<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'rating-other-user-rating'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>contents<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>get_text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># not all reviews have stars, so if the span does not exist, we'll just enter a NaN value</span>\n            stars <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>NaN\n        \n        <span class=\"token comment\"># 2. Store the date that the review was posted</span>\n        date <span class=\"token operator\">=</span> rev<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'review-date'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'ascii'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'ignore'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># 3. Store the username of the author of the review </span>\n        <span class=\"token comment\"># note that we encode and decode the following text fields to ensure that they're in a tractable format </span>\n        author <span class=\"token operator\">=</span> rev<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'display-name-link'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>contents<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'ascii'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'ignore'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 3. Store the text of the review itself</span>\n        review_text <span class=\"token operator\">=</span> rev<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'content'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>contents<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'ascii'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'ignore'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># 4. Store the url of the review itself</span>\n        url <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"imdb.com</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>rev<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'title'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>attrs<span class=\"token punctuation\">[</span><span class=\"token string\">'href'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n        \n        <span class=\"token comment\"># 4. Store usefulness rating </span>\n        usefulness <span class=\"token operator\">=</span> rev<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'actions'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        usefulness <span class=\"token operator\">=</span> usefulness<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n        usefulness <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>usefulness<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>usefulness<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'ascii'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'ignore'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># append the above variables to the DataFrame we passed into the function</span>\n        frame <span class=\"token operator\">=</span> frame<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">,</span> <span class=\"token string\">'stars'</span><span class=\"token punctuation\">:</span> stars<span class=\"token punctuation\">,</span> <span class=\"token string\">'date'</span><span class=\"token punctuation\">:</span> date<span class=\"token punctuation\">,</span> <span class=\"token string\">'author'</span><span class=\"token punctuation\">:</span> author<span class=\"token punctuation\">,</span> <span class=\"token string\">'review_text'</span><span class=\"token punctuation\">:</span> review_text<span class=\"token punctuation\">,</span> <span class=\"token string\">'url'</span><span class=\"token punctuation\">:</span> url<span class=\"token punctuation\">,</span> <span class=\"token string\">'usefulness'</span><span class=\"token punctuation\">:</span>usefulness<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> ignore_index<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># repeat that process for the first 25 reviews for the movie (if that many exist)</span>\n    <span class=\"token keyword\">return</span> frame</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Hopefully you can match all the <code class=\"language-text\">.find()</code> function calls and their arguments to the anatomy of the main <code class=\"language-text\">imdb-user-review</code> on the review page. </p>\n<p>Note that there is unfortunately no way to adjust the URL for a review page to show <em>more</em> than 25 reviews by default.  In order to reveal more, if available, we'd need to click the \"Load More\" button near the bottom of the page which is a bit outside the scope of both this workshop and BeautifulSoup.  (Checkout <a href=\"imdb-user-review\">Selenium</a> for a more powerful automated tool).</p>\n<p>Regardless, we should now be able to pass in the url of each movie from the main top 1,000 list to the above helper function and get at most 25 rows of reviews for each movie.</p>\n<p>In another cell, we can write the code to get the links to the top 250 movies:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># instantiate a new BS4 element tree from the top 1,000 list</span>\nresponse <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>URL_MOVIES_250<span class=\"token punctuation\">)</span>\n        \nsoup <span class=\"token operator\">=</span> bs4<span class=\"token punctuation\">.</span>BeautifulSoup<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span> <span class=\"token string\">'html.parser'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># fetch the URLS for all the movies and store them in a list</span>\nmovie_links <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>attrs<span class=\"token punctuation\">[</span><span class=\"token string\">'href'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> m <span class=\"token keyword\">in</span> soup<span class=\"token punctuation\">.</span>find_all<span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'lister-item-header'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># For each movie, grab as many reviews as possibles</span>\n<span class=\"token keyword\">for</span> link <span class=\"token keyword\">in</span> movie_links<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># rough loading bar to show progress </span>\n    <span class=\"token comment\"># modify the review url to sort the reviews by the total number of votes for usefulness</span>\n    m_url <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"https://www.imdb.com</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>link<span class=\"token punctuation\">}</span></span><span class=\"token string\">reviews?sort=totalVotes&amp;dir=desc&amp;ratingFilter=0\"</span></span>\n    df <span class=\"token operator\">=</span> get_movie_info<span class=\"token punctuation\">(</span>m_url<span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">)</span> <span class=\"token comment\"># for each movie, get the top 25 most voted on reviews</span>\n    <span class=\"token comment\"># time.sleep(0.05) # set a timeout so that we don't overwhelm IMBDb </span>\n\ndf <span class=\"token comment\"># display our resultant DataFrame</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This will take some time as we're iterating over 250 movies, and for each movie we're trying to iterate over 25 reviews, and for each review, we're extracting 7 columns worth of information.</p>\n<p>Lastly, we'll want to save this DataFrame to a csv file so that we can skip this step in the future:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># save the dataframe to a csv file</span>\ndf_csv <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>to_csv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Top_250_IMDb.csv'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>df_csv<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>","frontmatter":{"date":"19 November, 2020","path":"/blog/webscraping-workshop","title":"27 | Webscraping Workshop"},"fields":{"readingTime":{"text":"8 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}