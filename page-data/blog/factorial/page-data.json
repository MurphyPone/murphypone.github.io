{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/factorial","result":{"data":{"markdownRemark":{"html":"<h1>I don't like NFTs</h1>\n<p>I think they're rather dumb. Smarter folks than I have written at <em>length</em><sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup> about how</p>\n<ul>\n<li>they're unable to solve the problem they're named for,</li>\n<li>they prove no meaningful ownership (a notion which is normatively, but not physically, conferrable â€“ and <em>normatively</em> NFTs are right-clickable),</li>\n<li>they're energy-wasteful<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup></li>\n<li>they're the commodity of exploitative currency<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup></li>\n<li>and more</li>\n</ul>\n<p>Harsh segue into me also stating that I harbor little to no misgivings towards artists trying break into the scene, stay relevant, or even make a quick buck in the ever-evolving market â€“ that ire is reserved strictly for the bad actors and people in my mentions tagging me for giveaways.  Additionally, I want to give explicitly <em>positive</em> credit to the fellow who inspired this post with his neat idea:</p>\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">3 factorial <a href=\"https://t.co/MpjFlPdp72\">pic.twitter.com/MpjFlPdp72</a></p>&mdash; Lars Wander (@larswander) <a href=\"https://twitter.com/larswander/status/1609945781565259778?ref_src=twsrc%5Etfw\">January 2, 2023</a><img src=\"https://pbs.twimg.com/media/FletFABXoAIw5CY?format=jpg&name=medium\"></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>But... as his replies point out, it's not a novel idea<sup id=\"fnref-5\"><a href=\"#fn-5\" class=\"footnote-ref\">5</a></sup> nor algorithm<sup id=\"fnref-6\"><a href=\"#fn-6\" class=\"footnote-ref\">6</a></sup>.  Worth stating â€“not to detract from the value of artists' labor or anything of the sortâ€“ but rather to underscore that minting something like this as a Non-Fungible Token is pretty stupid.<sup id=\"fnref-4\"><a href=\"#fn-4\" class=\"footnote-ref\">4</a></sup>  You can't patent geometry.<sup id=\"fnref-7\"><a href=\"#fn-7\" class=\"footnote-ref\">7</a></sup>  Therefore, I took it upon myself, the Robin Hood of would-be NFTs to reverse engineer this factorial pattern, liberate it, and more...</p>\n<h1>Reverse Engineer</h1>\n<p>... that's what they call me at work, it's like being a negative 10x engineer ðŸ˜Ž.</p>\n<p>Let's first examine the problem and devise a game plan about how we can replicate these intertwining patterns.</p>\n<p>For starters we need a list of elements we wish to permute; these might as well be the 1-indexed indices of the list.</p>\n<p>Next, we need to generate all the permutations of a list: <a href=\"https://stackoverflow.com/questions/9960908/permutations-in-javascript\">simple as</a>. </p>\n<p>Then, observing from both Lars' replies to the inqueries about how this pattern was achieved, the figures themselves, as well as some experience with leetcode medium problems, we'll want to perform a series of swaps which lead us from our initial configuration e.g. <code class=\"language-text\">[1, 2, 3]</code> to each of the desired permutations.</p>\n<p>For example, referencing the 4th permutation of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>3</mn><mo stretchy=\"false\">!</mo></mrow><annotation encoding=\"application/x-tex\">3!</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">!</span></span></span></span> above, we want to end with <code class=\"language-text\">[2, 3, 1]</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\"> i j k\n[1 2 3] -&gt; [2, 3, 1]\n        =&gt; [3, 2, 1] swap i, k\n        =&gt; [2, 3, 1] swap i, j</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>To draw curves between points, it will probably be useful to keep track of this \"state history\" of sorts.  This also implies that the height of each figure will need be proportionate to the minimum number of swaps needed permute the initial configuration into the target or vice versa.  Analysis<sup id=\"fnref-8\"><a href=\"#fn-8\" class=\"footnote-ref\">8</a></sup> indicates that the worst case for a generic algorithm is a reversed array, or some equivalent â€“perhaps-odd-in-lengthâ€“ permutation.  Such an array is said to be maximally fucked, and requires <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>âˆ’</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">âˆ’</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> swaps to be unfucked which is <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>.  So, the height of each permutation is proportionate to the number of elements in the permutation.</p>\n<p>To keep the figures uniform in height which is aesthetically desirable, we'll need to <em>pad</em> this state history with duplicate rows.  For example, <code class=\"language-text\">[1, 2, 3]</code> is both the initial configuration and the first permutation, but no-ops don't look pretty when plotted, so we'll <em>draw</em> out the path into repeating segments:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">[\n\t[1, 2, 3],\n\t[1, 2, 3],\n\t[1, 2, 3]\n]</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>so it doesn't look stupid when plotted adjacent to its neighbor <code class=\"language-text\">[1, 3, 2]</code> or <code class=\"language-text\">[2, 1, 3]</code> with longer state histories.</p>\n<p>Once we've segmented each <em>trace</em> of a permutation, we need only connect the dots with fancy curves and we'll have successfully created a money printer bounded only by how many combinatorials your computer can handle.<sup id=\"fnref-9\"><a href=\"#fn-9\" class=\"footnote-ref\">9</a></sup></p>\n<h1>Daniel Shiffman is my Spirit Animal</h1>\n<p>True to form, we'll start with blank p5.js project.<sup id=\"fnref-10\"><a href=\"#fn-10\" class=\"footnote-ref\">10</a></sup>  If you don't know about p5.js, look no further than <a href=\"https://thecodingtrain.com/\">The Coding Train</a> for a heaping amount information on generative art, introductory coding, and much <em>much</em> more using the p5 library!  Daniel Shiffman is the Bob Ross of technology.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// I copy paste the same handful of palettes between projects</span>\n<span class=\"token comment\">// just make sure you have N colors in your palette, one for each strand</span>\n<span class=\"token comment\">// i.e. this palette assumes we won't attempt 6!</span>\n<span class=\"token keyword\">let</span> color_palettes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"#D63826\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"#FFCC00\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"#79C3A7\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"#00bbff\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"#5500FF\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ... more palettes </span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> init<span class=\"token punctuation\">;</span> \t\t\t<span class=\"token comment\">// our initial configuration</span>\n<span class=\"token keyword\">let</span> permutations<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// all our permutations thereof</span>\n<span class=\"token keyword\">let</span> min_swaps<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// the length of init</span>\n<span class=\"token keyword\">let</span> step<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// the space between each strand in a figure</span>\n<span class=\"token keyword\">let</span> gap<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// the space between each figure</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">createCanvas</span><span class=\"token punctuation\">(</span><span class=\"token number\">800</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tinit <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tpermutations <span class=\"token operator\">=</span> <span class=\"token function\">permutator</span><span class=\"token punctuation\">(</span>init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \tstep <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n  \tgap <span class=\"token operator\">=</span> init<span class=\"token punctuation\">.</span>length <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// scale based on the number of figures</span>\n  \tmin_swaps <span class=\"token operator\">=</span> init<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">background</span><span class=\"token punctuation\">(</span><span class=\"token number\">220</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// adjust the darkness so bright colors have nice contrast</span>\n\t<span class=\"token function\">noFill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t <span class=\"token comment\">// since we're just drawing lines</span>\n\t<span class=\"token function\">strokeWeight</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// so the lines have some thickness</span>\n\n\t<span class=\"token comment\">// code will go here momentarily</span>\n\n\t<span class=\"token function\">noLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t <span class=\"token comment\">// animation is left as an exercise to the reader</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// permutation function taken graciously from StackOverflow</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">permutator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">inputArr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">permute</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> curr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> next <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">permute</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">permute</span><span class=\"token punctuation\">(</span>inputArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Next we need a helper function to create the trace or state history of swaps separating our initial configuration from the target permutation:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">createSegments</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input<span class=\"token punctuation\">,</span> target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// our result is an array of arrays, starting with *a copy* the initial config </span>\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>input<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n\n  <span class=\"token comment\">// this is pretty much just a cannabalized selection sort</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// the state \"row\" we're going to append to the result is </span>\n\t<span class=\"token comment\">// just a copy of the previous state</span>\n    <span class=\"token keyword\">let</span> curr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>res<span class=\"token punctuation\">[</span>res<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n\n    <span class=\"token comment\">// for each element, if it's not in the target position</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> target<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// make one swap</span>\n      target_i <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">[</span>curr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> curr<span class=\"token punctuation\">[</span>target_i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>curr<span class=\"token punctuation\">[</span>target_i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> curr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t  <span class=\"token comment\">// append it to the result</span>\n\t  res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// pad the result to the desired height with copies of the the solved state</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> min_swaps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>res<span class=\"token punctuation\">[</span>res<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Then, back inside the <code class=\"language-text\">draw</code> loop, we want to:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">Iterate over each possible permutation\n\tGenerate each permutation&#39;s segmented trace\n    \tFor each snapshot/row in a trace\n        \tFor each strand/column in a row\n            \tDraw a curve connecting the current row to the previous row</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>an actual implementation of which can look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">background</span><span class=\"token punctuation\">(</span><span class=\"token number\">220</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">noFill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">strokeWeight</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// for each permutation</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> permutations<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> target <span class=\"token operator\">=</span> permutations<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> segments <span class=\"token operator\">=</span> <span class=\"token function\">createSegments</span><span class=\"token punctuation\">(</span>init<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   \n    <span class=\"token comment\">// for each \"row\" in a permutation (skipping the first, initial config)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> s <span class=\"token operator\">&lt;</span> segments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> s<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> prev <span class=\"token operator\">=</span> segments<span class=\"token punctuation\">[</span>s <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> curr <span class=\"token operator\">=</span> segments<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t  <span class=\"token comment\">// for each column in a row\t  </span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> c <span class=\"token operator\">&lt;</span> prev<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> c<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// color it accordingly</span>\n        <span class=\"token function\">stroke</span><span class=\"token punctuation\">(</span>color_palettes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>init<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n\t\t<span class=\"token comment\">// this looks gross, but just wraps the figures to a new line</span>\n        <span class=\"token keyword\">let</span> x1 <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> step <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> init<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> gap<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> x2 <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> step <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> init<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> gap<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">let</span> h_pad <span class=\"token operator\">=</span>\n          step <span class=\"token operator\">+</span> <span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> init<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>init<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> gap<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> y1 <span class=\"token operator\">=</span> h_pad <span class=\"token operator\">+</span> gap <span class=\"token operator\">*</span> s <span class=\"token operator\">+</span> <span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> init<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> gap<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> y2 <span class=\"token operator\">=</span> h_pad <span class=\"token operator\">+</span> gap <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> init<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> gap<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// for straight lines, use: line(x1, y1, x2, y2)</span>\n\t\t<span class=\"token comment\">// we set the control points of a bezier curve (the inner 4 arguments)</span>\n\t\t<span class=\"token comment\">// to pull the curve inwards, towards the center of each figure</span>\n        <span class=\"token function\">bezier</span><span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">,</span> y1 <span class=\"token operator\">+</span> step<span class=\"token punctuation\">,</span> x2<span class=\"token punctuation\">,</span> y2 <span class=\"token operator\">-</span> step<span class=\"token punctuation\">,</span> x2<span class=\"token punctuation\">,</span> y2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">noLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>And there we have it, for all permutations of 3, 4, and most of 5 respectively:</p>\n<p><img src=\"../images/factorial-1.png\"></p>\n<p><img src=\"../images/factorial-2.png\"></p>\n<p><img src=\"../images/factorial-3.png\"></p>\n<p>Caveat Emptor â€“ this code is messy, suboptimal, and doesn't even center the figures on the page, but it's perfectly acceptable for me since I'm just going to export it as an SVG and center it on piece of paper to be plotted.</p>\n<h3>Exporting from p5 to SVGs</h3>\n<p>By including the following SVG module in your p5 sketch's <code class=\"language-text\">index.html</code>, </p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-html line-numbers\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/p5.js-svg@1.3.1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>we can add the <code class=\"language-text\">SVG</code> argument to the <code class=\"language-text\">createCanvas</code> function to instruct the browser to render elements of the canvas as SVG curves which we can then save at the bottom of our draw loop, or on keypress, or some other triggering event:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">createCanvas</span><span class=\"token punctuation\">(</span><span class=\"token number\">800</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1500</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SVG</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ... </span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// do stuff</span>\n\t<span class=\"token function\">noLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"factorial-\"</span> <span class=\"token operator\">+</span> init<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token string\">\".svg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>which will save the curves to the desired output on page refresh which can then be imported into your favorite plotting software and plotted right away.</p>\n<h1>praxis</h1>\n<video width=\"800\" height=\"600\" autoplay=\"autoplay\">\n  <source src=\"/images/factorial.mp4\" type=\"video/mp4\" />\n</video>\n<p>If you like these, I'd be happy to funge you one.  Email or message me a mailing address and I'll send one to you at the cost of shipping (~$11) â€“ <em>I will not accept crypto</em>.</p>\n<p><img src=\"/images/factorial-4.png\"></p>\n<p>Alternatively, make your own!  <a href=\"https://gist.github.com/MurphyPone/7a821bd3f3c6b9d1409bf24ada871e7c\">Here's the complete source code</a>.</p>\n<script src=\"https://gist.github.com/MurphyPone/7a821bd3f3c6b9d1409bf24ada871e7c.js\"></script>\n<h2>Foonotes &#x26; References</h2>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://antsstyle.medium.com/why-nfts-are-bad-the-long-version-2c16dae145e2#e3ba\">Antstyle</a>. \"Why NFTs are bad: the long version.\" </p>\n<p>  While I don't endorse each and every critique raised in this post, it's more or less the de facto glossary of <em>why NFTs are stupid</em>.    </p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">â†©</a>\n</li>\n<li id=\"fn-2\">\n<p><a href=\"https://ccaf.io/cbeci/index\">Cambridge</a> Bitcoin Electricity Consumption Index</p>\n<p>  Again, feeling the need to chime in here with commentary.  Energy use is not bad.  <em>Wanton</em> energy use is not bad.  But <em>wanton energy use as proof of stake, work, etc. for signing of a transaction of an arbitrary (and it is arbitrary) address for a jpeg which I can replicate in an afternoon and funge a million of in a millisecond</em> <u>is bad</u>.</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">â†©</a>\n</li>\n<li id=\"fn-3\">\n<p>This is a weak criticism, I know.  The currency itself has no agency nor bearing on the morality of the transactions it's used for.  However, the mechanisms surrounding cryptocurrency and the hype trains of such coins â€“despite masquerading as secure, revolutionary, decentralized, etc.â€“ lend themselves to exploitation.  </p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">â†©</a>\n</li>\n<li id=\"fn-4\">\n<p>I have notifications enabled for the artist as well, and this post is kind of a pre-emptive open source strike.</p>\n<a href=\"#fnref-4\" class=\"footnote-backref\">â†©</a>\n</li>\n<li id=\"fn-5\">\n<p>\"Looks like <a href=\"https://twitter.com/_person_a_/status/1609952232144834562?s=20\">braid groups</a> but different. ðŸ¤Œ\"</p>\n<a href=\"#fnref-5\" class=\"footnote-backref\">â†©</a>\n</li>\n<li id=\"fn-6\">\n<p><a href=\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\">Knuth/Fisher-Yates Shuffle</a></p>\n<a href=\"#fnref-6\" class=\"footnote-backref\">â†©</a>\n</li>\n<li id=\"fn-7\">\n<p>shut UP!</p>\n<a href=\"#fnref-7\" class=\"footnote-backref\">â†©</a>\n</li>\n<li id=\"fn-8\">\n<p><a href=\"https://www.interviewbit.com/blog/minimum-swaps-problem/#:~:text=So%20we%20can%20generalize%20that,a%20standard%20Depth%20First%20Search\">Minimum Swaps Problem</a>.</p>\n<a href=\"#fnref-8\" class=\"footnote-backref\">â†©</a>\n</li>\n<li id=\"fn-9\">\n<p>The amount of time I've linked to <a href=\"https://murphyandhislaw.com/blog/voting-power#infertility\">this one joke...</a></p>\n<a href=\"#fnref-9\" class=\"footnote-backref\">â†©</a>\n</li>\n<li id=\"fn-10\">\n<p>You can also just do this directly in the browser now with zero dev configuration: <a href=\"https://editor.p5js.org/\">https://editor.p5js.org/</a></p>\n<a href=\"#fnref-10\" class=\"footnote-backref\">â†©</a>\n</li>\n</ol>\n</div>","frontmatter":{"date":"05 January, 2023","path":"/blog/factorial","title":"46 | You know what really funges my tokens?"},"fields":{"readingTime":{"text":"10 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}