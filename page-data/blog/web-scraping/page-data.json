{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/web-scraping","result":{"data":{"markdownRemark":{"html":"<h2>About</h2>\n<p>This article is intended to provide some more context about snagging trickier elements using the methods provided by Selenium as I've spent too long trying to piece together esoteric xpath syntax.  The example used involves writing a self-bot for a Discord server which –if used– can be in violation of their Terms of Service and result in termination of your account.</p>\n<blockquote>\n<p>You agree not to (and not to attempt to): ... (iii) use data mining, robots, spiders, or similar data gathering and extraction tools on the Service.</p>\n</blockquote>\n<p>The techinques listed below are applicable all around the web though, and this post also covers a <em>somewhat</em> intelligent workflow for similar projects. </p>\n<p>The goal I'm addressing in my personal implementation of this webscraping bot is to automate the grinding process of a text-based rpg game by hunting, gathering, healing and buying on loop.</p>\n<h2>Setup</h2>\n<p>For this project I'm going to use Python 3.7 as well as a few packages.  The only necessary installs are Selenium and pytesseract as well as a webdriver for whatever browser you prefer: I recommend ozilla's <a href=\"https://www.google.com/search?q=geckodriver&#x26;oq=geck&#x26;aqs=chrome.2.69i57j0l5j46j69i61.1889j0j1&#x26;sourceid=chrome&#x26;ie=UTF-8\">geckodriver</a>.  <a href=\"\">Towards the end of this post</a>, I'll show a neat trick to streamline the installation process for other people who might want to use your code.    </p>\n<p>As far as file structure goes, I'm going to start off with 3 files: </p>\n<ul>\n<li><code class=\"language-text\">utils.py</code> - houses all the routines we're going to define </li>\n<li><code class=\"language-text\">main.py</code> - calls to methods in utils</li>\n<li><code class=\"language-text\">conf.py</code> - store the login credentials and other personalized info for the script</li>\n</ul>\n<h2>utils.py</h2>\n<p>In order to login to our own personal Discord server so as not to blow up the text channels of our friends/coworkers/whoever, we need to login.  In order to automate the login process we need a webdriver.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># utils.py</span>\n<span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver\n<span class=\"token keyword\">from</span> selenium<span class=\"token punctuation\">.</span>webdriver<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span>wait <span class=\"token keyword\">import</span> WebDriverWait\n<span class=\"token keyword\">from</span> selenium<span class=\"token punctuation\">.</span>webdriver<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>keys <span class=\"token keyword\">import</span> Keys\n<span class=\"token keyword\">from</span> selenium<span class=\"token punctuation\">.</span>webdriver<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>desired_capabilities <span class=\"token keyword\">import</span> DesiredCapabilities\n\n<span class=\"token keyword\">import</span> time <span class=\"token comment\"># to add some delays</span>\n\n<span class=\"token comment\"># Configures our webdriver</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">build_driver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cap <span class=\"token operator\">=</span> DesiredCapabilities<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>FIREFOX\n    exec_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/path-to-your/geckodriver\"</span>\n    <span class=\"token keyword\">return</span> webdriver<span class=\"token punctuation\">.</span>Firefox<span class=\"token punctuation\">(</span>capabilities<span class=\"token operator\">=</span>cap<span class=\"token punctuation\">,</span> executable_path<span class=\"token operator\">=</span>executable_path<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The above method serves as a pseudo-constructor for the driver we'll use.  The driver functions as a minimal browsing window which we can control with Selenium commands from our script.  Let's use it login to our Discord Server/Channel</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># utils.py </span>\n\n<span class=\"token comment\"># All our methods will take in a driver as the primary argument</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    driver<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>URL<span class=\"token punctuation\">)</span>         \n    driver<span class=\"token punctuation\">.</span>find_element_by_name<span class=\"token punctuation\">(</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>send_keys<span class=\"token punctuation\">(</span>USER<span class=\"token punctuation\">)</span>\n    driver<span class=\"token punctuation\">.</span>find_element_by_name<span class=\"token punctuation\">(</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>send_keys<span class=\"token punctuation\">(</span>PASS<span class=\"token punctuation\">)</span>\n    driver<span class=\"token punctuation\">.</span>find_element_by_xpath<span class=\"token punctuation\">(</span><span class=\"token string\">\"//button[@type='submit']\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Breaking down the <code class=\"language-text\">login</code> method: </p>\n<ol>\n<li><code class=\"language-text\">get(URL)</code> will open the desired URL on our driver's window; we'll define URL, USER, and PASS in a moment </li>\n<li>\n<p><code class=\"language-text\">driver.find_element_by_name()</code> is pretty self explanatory.  It will look on the visible page at the <code class=\"language-text\">name</code> attributes for all the elements and return the first match.  We want to find the username and password fields and send our login credentials to those fields</p>\n<ul>\n<li>The second part of this line <code class=\"language-text\">send_keys(x)</code> will paste <code class=\"language-text\">x</code> into the input field if the element has one</li>\n<li>We can find all the necessary, identifiable element information using the developer tools on any browser:\n<img src=\"https://i.imgur.com/E4M1NHO.png\"></li>\n</ul>\n</li>\n<li>\n<p>A lot of websites wrap their login forms in the helpful <code class=\"language-text\">&lt;form&gt;</code> tags which would allow us to simply execute <code class=\"language-text\">driver.submit()</code>, but Discord uses a proprietary login button, so we have to find on the page on line 8.  </p>\n<ul>\n<li>xpath is the most powerful of the available Selenium methods, but it's a bit complicated at first.  Let's break down the syntax:</li>\n<li>the <code class=\"language-text\">//</code> indicate where we want to start searching from where, similar to a file system <code class=\"language-text\">//</code> start looking at the root ofthe document</li>\n<li>next the <code class=\"language-text\">button</code> keyword inidicates that we want to filter out non-button elements</li>\n<li>the part inside the <code class=\"language-text\">[]</code> let us filter even further by an attribute, in this case <code class=\"language-text\">type</code>.  </li>\n<li>The resulting query will search from the root of the document for button elements of submit type - the first instance on this page is our submit button, so we'll <code class=\"language-text\">.click()</code> it to send ourr login info</li>\n</ul>\n</li>\n</ol>\n<h2>conf.py</h2>\n<p>Let's take a step back and think about a smart way to send our credentials without having them available on GitHub or wherever we're storing our code.</p>\n<p>We can define variables in our <code class=\"language-text\">conf.py</code> file and import them into other files.  Additionally, if we create a <code class=\"language-text\">.gitignore</code> file in our working directory including the name of our <code class=\"language-text\">conf.py</code> it won't track it at all.  All we have to do then is let users know that they need to create one.  For example, my README for this project is: </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">## How to Use:\n\n1. Create a file called `conf.py` as follows: \n\n    URL = &quot;URL to the discord server you want to work in&quot;\n    CHANNEL_NAME = &quot;Name of the channel you want to use, e.g. &#39;#bot-spam&#39;&quot;\n    USER = &quot;hunter12@aol.com&quot;\n    PASS  = &quot;hunter12&quot;\n    QUIPS = [&quot;List&quot;, &quot;of&quot;, &quot;messages&quot;, &quot;to send along with the botted commands at 5 min intervals&quot;]</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>utils.py</h2>\n<p>So back inside our utils file, we can reference the variables in our <code class=\"language-text\">conf.py</code>, via <code class=\"language-text\">from conf import *</code></p>\n<p>Now that <em>we're in</em> we want to send a message.  In my case, I wanted to have the bot hunt enemies once every minute.  But hunting enemies makes the character lose health, so first we need to make sure they have enough hp to survive a battle.  All this information is readily available via commands provided by the bot we're playing with, so we just need to gather it up, add some logic, then throw it in a loop.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># sends a message</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">send_message</span><span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Discord uses aria-labels to identify different components of their UI, so all we need to do is search for our CHANNEL_NAME</span>\n    mesg_element <span class=\"token operator\">=</span> driver<span class=\"token punctuation\">.</span>find_element_by_xpath<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"//div[@aria-label='Message </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>CHANNEL_NAME<span class=\"token punctuation\">}</span></span><span class=\"token string\">']\"</span></span><span class=\"token punctuation\">)</span>\n    mesg_element<span class=\"token punctuation\">.</span>send_keys<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n    mesg_element<span class=\"token punctuation\">.</span>send_keys<span class=\"token punctuation\">(</span>Keys<span class=\"token punctuation\">.</span>RETURN<span class=\"token punctuation\">)</span>\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># Smart to wait a couple seconds for our message to get sent and for our anticipated response to arrive </span>\n\n<span class=\"token comment\"># heals the player</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">heal</span><span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    send_message<span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rpg heal\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Ensures the player is at max health, then hunts</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">hunt</span><span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    stats <span class=\"token operator\">=</span> get_stats<span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> get_hp_as_pct<span class=\"token punctuation\">(</span>stats<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">:</span>\n        buy_life_potion<span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span>\n        heal<span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span>\n\n    send_message<span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rpg hunt\"</span><span class=\"token punctuation\">)</span>\n    send_message<span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">,</span> random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>QUIPS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Gets the amount of life potions in the players inv</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_life_potions</span><span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    send_message<span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rpg i\"</span><span class=\"token punctuation\">)</span>\n    inv_element <span class=\"token operator\">=</span> driver<span class=\"token punctuation\">.</span>find_elements_by_xpath<span class=\"token punctuation\">(</span><span class=\"token string\">\"//img[@aria-label=':lifepotion:']\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    inv_txt <span class=\"token operator\">=</span> inv_element<span class=\"token punctuation\">.</span>find_element_by_xpath<span class=\"token punctuation\">(</span><span class=\"token string\">\"./..\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text\n\n    <span class=\"token keyword\">return</span> re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">\"life potion: (.*)\"</span><span class=\"token punctuation\">,</span> inv_txt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Interrupting to highlight a potential tricky bit.  An xpath query might return several matches.  To get the desired (e.g. most recent) element, we can return a list of elements, and simply get the last one. (Additionally, depending on the use case, you might want to iterate over this list of elements etc.)</p>\n<p>We're able to isolate the text within our desired div by using <code class=\"language-text\">(&quot;./..&quot;)</code> which returns the parent element of our current element.  This is helpful if we have a situation where the content we cant has no consistently identifiable attributes, but is lumped in with elements that do.</p>\n<p>Furthermore, if we want to just grab a specific portion of the response text, we can make use of regular expressions (as long as we <code class=\"language-text\">import re</code>) and match anything after some text that we <em>know</em> will be present (e.g. \"price: x\" and we want x) by matching anything or in between the known text and ungrouping the result of the regular expression query.</p>\n<p>Back to the utils file: </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">buy_life_potion</span><span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>get_life_potions<span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">:</span>\n        send_message<span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rpg buy life potion\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Gets the players stats and returns as a dict</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_stats</span><span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    send_message<span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rpg p\"</span><span class=\"token punctuation\">)</span>\n    \n    stats_element <span class=\"token operator\">=</span> driver<span class=\"token punctuation\">.</span>find_elements_by_xpath<span class=\"token punctuation\">(</span><span class=\"token string\">\"//img[@aria-label=':heart:']\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    stats_txt <span class=\"token operator\">=</span> stats_element<span class=\"token punctuation\">.</span>find_element_by_xpath<span class=\"token punctuation\">(</span><span class=\"token string\">\"./..\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text\n\n    coin_element <span class=\"token operator\">=</span> driver<span class=\"token punctuation\">.</span>find_elements_by_xpath<span class=\"token punctuation\">(</span><span class=\"token string\">\"//img[@aria-label=':coin:']\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    coin_txt <span class=\"token operator\">=</span> coin_element<span class=\"token punctuation\">.</span>find_element_by_xpath<span class=\"token punctuation\">(</span><span class=\"token string\">\"./..\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text\n\n    stats <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'$'</span> <span class=\"token punctuation\">:</span> re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">\"Coins: (.*)\"</span><span class=\"token punctuation\">,</span> coin_txt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'pots'</span><span class=\"token punctuation\">:</span> get_life_potions<span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'AT'</span><span class=\"token punctuation\">:</span> re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">\"AT: (.*)\\n\"</span><span class=\"token punctuation\">,</span> stats_txt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'DE'</span><span class=\"token punctuation\">:</span> re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">\"DEF: (.*)\\n\"</span><span class=\"token punctuation\">,</span> stats_txt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'HP'</span><span class=\"token punctuation\">:</span> re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">\"LIFE: (.*)\"</span><span class=\"token punctuation\">,</span> stats_txt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>stats<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> stats\n\n<span class=\"token comment\"># 5 minute cd</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">five_cycle</span><span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        hunt<span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span>\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">65</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>We can add many more automated commands by recycling the techniques covered above.  All we have to do now is organize our logic in a loop which we'll put in a <code class=\"language-text\">main.py</code> to keep things clean.</p>\n<h2>main.py</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># main.py </span>\n\n<span class=\"token keyword\">from</span> utils <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> conf <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">import</span> time\n\ndriver <span class=\"token operator\">=</span> build_driver<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nlogin<span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n   five_cylce<span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Now, if we were to run this script, it would grind enemies on our behalf, but we don't want to violate ToS, so it will remain untouched and untested.</p>","frontmatter":{"date":"19 April, 2020","path":"/blog/web-scraping","title":"Practical Applications of Webscraping"},"fields":{"readingTime":{"text":"7 min read"}}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}