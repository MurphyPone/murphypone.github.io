{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/peter-t","webpackCompilationHash":"","result":{"data":{"markdownRemark":{"html":"<style type='text/css'>\n  a {\n    border-bottom: 1px solid hsla(131, 75%, 40%, 0.8);\n    color: black;\n    text-decoration: none;\n    -webkit-transition: background-color .25s;\n    transition: background-color .25s;\n  }\n  a:hover {\n    background-color: hsla(131, 75%, 40%, 0.8);\n\n  }\n</style>\n<h1>The Man</h1>\n<p>The British mathematician and father of modern computing Alan Turing was born in 1912.  Popularly lauded as the brains behind cracking the Nazi's code used in the second World War through the use of his Enigma machine, Alan Touring dedicated is life to computation.  In 1936, he published an essay <a href=\"https://history-computer.com/Library/turing_Oncomputablenumbers.pdf\">\"On Computable Numbers, With an Application to the Entscheidungs Problem\"</a> which hinted at the ultimate focus of this series of blog posts: Turing Machines.</p>\n<p><img src=\"https://regmedia.co.uk/2015/05/15/alan_turing.jpg?x=442&#x26;y=293&#x26;crop=1\" alt=\"Alan turing\"></p>\n<h1>The Machine</h1>\n<p>In the aforementioned article, Turing describes a machine which would supersede human computational capabilities:</p>\n<blockquote>\n<p><em>We may compare a man in the process of computing a real number to a machine\nwhich is only capable of a finite number of conditions q1, q2, ..., qR which will be\ncalled “m-configurations”. The machine is supplied with a “tape”, (the analogue of\npaper) running through it, and divided into sections (called “squares”) each capable\nof bearing a “symbol”. At any moment there is just one square, say the r-th, bearing\nthe symbol S(r) which is “in the machine”. We may call this square the “scanned\nsquare”. The symbol on the scanned square may be called the “scanned symbol”.\nThe “scanned symbol” is the only one of which the machine is, so to speak,\n“directly aware”. However, by altering its m-configuration the machine can\neffectively remember some of the symbols which it has “seen” (scanned)\npreviously. The possible behaviour of the machine at any moment is determined by\nthe m-configuration qn and the scanned symbol S(r). This pair qn, S(r) will be\ncalled the “configuration”: thus the configuration determines the possible behaviour\nof the machine. In some of the configurations in which the scanned square is blank\n(i.e. bears no symbol) the machine writes down a new symbol on the scanned\nsquare: in other configurations it erases the scanned symbol. The machine may also\nchange the square which is being scanned, but only by shifting it one place to right\nor 1eft. In addition to any of these operations the m-configuration may be changed.\nSome of the symbols written down {232} will form the sequence of figures which is\nthe decimal of the real number which is being computed. The others are just rough\nnotes to “assist the memory”. It will only be these rough notes which will be liable\nto erasure.</em></p>\n</blockquote>\n<p>Turing goes on to elaborate on the exact specifications of the theoretical machine which I strongly encourage readers to pursue themselves.  But for the sake of the musings of this series, the layman's definition of a Turing machine can be understood as an infinitely-long tape (memory) with initially blank squares that can be written to.</p>\n<p>The operational aspect of the machine has 3 functions:</p>\n<ol>\n<li>Read the symbol at the current square (memory address),</li>\n<li>Write/overwrite the symbol at the current square,</li>\n<li>Move the tape left or right by one square.</li>\n</ol>\n<p><img src=\"https://3c1703fe8d.site.internapcdn.net/newman/csz/news/800/2013/artificialmusclecomputer1.jpg\" alt=\"Turing Machine\"></p>\n<p>The last piece of vocabulary we need to embark on our Terrible Turing Journey is \"Turing Complete.\"  Something is said to be Turing Complete if it can simulate a Turing Machine.  If something is Turing Complete, it could theoretically solve any computational problem it was given, provided sufficient run time. Real world scenarios are limited by their lack of an \"infinite memory tape\" alluded to in Turing's paper - hence the thought experiment remains in the realm of goofs, gaffs, blog posts, and academic shit posts (commonly referred to as mathematical papers).    </p>\n<p>Tom Wildenhain has an excellent <a href=\"https://www.andrew.cmu.edu/user/twildenh/PowerPointTM/Paper.pdf\">shit post</a> and accompanying <a href=\"https://www.andrew.cmu.edu/user/twildenh/PowerPointTM/Paper.pdf\">hilarious presentation</a> on the Turing Completeness of MS PowerPoint.</p>\n<h1>The Plan</h1>\n<p>Now that the groundwork has been established, we can have some fun.  The purpose of this blog, from my perspective, is to house a series of <em>Terrible Turing Machines</em>.  </p>\n<p>Enjoy  </p>","frontmatter":{"date":"17 June, 2019","path":"/blog/peter-t","title":"What is a Turing Machine?","author":"Peter M."},"fields":{"readingTime":{"text":"4 min read"}}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}