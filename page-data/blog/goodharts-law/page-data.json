{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/goodharts-law","result":{"data":{"markdownRemark":{"html":"<style> \n  .n { visibility: hidden; } \n  \n  img {\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n    align: center;\n  }\n\n  .my-link {\n        text-decoration-color: #6666ff;\n\n  }\n  .my-link:hover {\n      background: #6666ff;\n      cursor: pointer;\n      animation-name: colorTransition;\n      animation-duration: .5s;\n  }\n\n</style>\n<h2>Goodhart's Law</h2>\n<blockquote>\n<p>When a measure becomes a target, it ceases to be a good measure.</p>\n</blockquote>\n<p>Oh, sage Goodhart, thou knowest mine heart. </p>\n<p>A pattern observable in all of nature.  A budget becomes a measure of need, and so resource expenditures exceed the budget to demonstrate <em>more need</em>; customer satisfaction ratings become kickback deals; code coverage is used to evaluate the quality of a software project, and thusly the <em>quality</em> of the code coverage falls...</p>\n<p>Consider a wee lad twiddling his thumbs, sipping his coffee, completing a crossword, and monitoring an alerts channel on an otherwise-innocuous weekday afternoon.  His phone alights, his wrist buzzes, and he jumps in unison with those around him as the murderous banshee cry of \"PAGER DUTY ALERT\" emitting from his phone strikes the fear of God into his bones.  Shaking their heads somberly, his coworkers return their gazes to their own crosswords as the wee lad begins to sweat.  Frantically navigating windows, dashboards, desperately acking the alerts and ping's pouring into his notification center, he identifies the culprit:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">[All Hours policy] poopy-domain-service-rpc-a19e686f exceeded memory limit threshold  \n  impact: poopy delivery may be delayed</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>A sigh of relief washes over the youth as he recognizes the specter that has been plaguing the on-call rotation for weeks now.  </p>\n<p>\"It's about time that somebody ups the memory limit for those pods tbh,\" he thinks to himself.  \"And I know just how to do it!\" (rare junior eng W).  Within seconds, a 1 line pull request has been opened against <code class=\"language-text\">poopy-domain-service</code> to increase memory allocation in the helm charts, and in a few more minutes, the junior engineer has secured necessary approvals from some sympathetic teammates who admire the naive ambition of the lad.  </p>\n<blockquote>\n<p>All in a day's wo–</p>\n</blockquote>\n<p>But wait... the merge button standing between him and a pat on the back from those who suffered before him and those that would come after is... gray? </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">Merging blocked due to Unit Test branch coverage degradation by 1.3%</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Bastard! A sly merge hook accusing him of degraded unit tests?  Surely there must be a mistake, he's only modified a configuration file.  Why– that \"code\" isn't even unit-testable?  Can't he force-merge the change, it's kind of an emergency, there's on ongoing site incident (of low severity, but nonetheless) being caused by the memory issue.  He's trying to do the right thing? And being thwarted by an unintelligent analysis policy.  </p>\n<p>\"I'll just find somewhere to write a quick unit test to make this go away,\" he says to himself.  Audible snickers drifting through the air from the senior engineers within earshot of the mutterings of the soon-to-be-madman.</p>\n<p>Opening his editor and navigating to the <code class=\"language-text\">test</code> directory, he is met first with a dialogue window informing him that the <code class=\"language-text\">sbt</code> project is indexing the files, and it should be ready for his feeble attempts in a few years.  After three more cups of coffee, two impromptu one-on-ones with a senior, and several unprintable utterances later, the junior engineer throws his hands up in dejection: </p>\n<blockquote>\n<p>Why the fUck did <em>&#x3C;person who hasn't worked at the company in three years></em> structure the tests like this?  This is impenetrable.  How did this ever get a passing test coverage score to begin with?  I can't even open the file that sample data is coming from because it's fifty-thousand lines long.  I'm not going to be able to make a dent. We really live like this?!\n...</p>\n</blockquote>\n<p>The senior engineer taps his own noggin, declares that it's 5 O'clock somewhere (it's 2:35 PM EST), and pats the lad who is inches from tears on the back.  </p>\n<p>Then a devilish thought, a truly deceitful and wicked idea comes to the boy –who, in this moment is becoming a man– it would be simpler to just fabricate some fugazi classes and tests to offset the code coverage than to decipher the intention and behavior of <code class=\"language-text\">PoopyServiceClientProfileFilterInjectionFactoryITSpec.scala</code>...  </p>\n<h2>I'm just a little boy who wants to eat berries and cream and build a Scala project for fun</h2>\n<blockquote>\n<p>idiot </p>\n</blockquote>\n<p>This is a stupid endeavor and deserving of mockery.  What a dumb thing to want to do.  Don't get me wrong, building things is perhaps the most pure form of satisfaction that I enjoy, but this is just a depraved and perverse means to an end.  At penalty of disclosing proprietary code, I can't just <em>show you</em> the <code class=\"language-text\">PoopyServiceClientProfileFilterInjectionFactoryIT.spec</code> and surrounding coverage itself, instead I must spinup a contrived sample service with it's own abysmal test coverage.  </p>\n<blockquote>\n<p>Should only take a second. </p>\n</blockquote>\n<p>And just like that, all the advancements in wisdom gained in the days prior have vanished from underneath me as I have fallen victim to the first gotcha of software engineering.  The notion that you spend most of your time actually coding rather than configuring, writing technical documents that will never see the light of day, and providing standup updates that consist of further delaying the delivery date of your task because you <em>routinely</em> forget that configuration et al. take up so much of your time.  Developer 👏 Efficiency 👏.  </p>\n<h2>Setting up an SBT project</h2>\n<p>The S in SBT does not stand for \"Simple\" nor \"Satisfying\" nor \"Superb\" nor \"Standard\" nor anything else that might sound pleasant.  Standing up a Scala project with Scala Build Tool –or, as it's less-fondly referred to– Shitty Build Tool, is anything but... </p>\n<p>It's almost not worth providing a beginner-friendly rundown/summary here because it's so far from a one-size-fits-all, it's more like <em>one-of-these-sizes-probably-fits-something-close-to-what-you-actually-want-according-to-greg-from-the-forums-nine-years-ago</em>.</p>\n<ol>\n<li>Install <code class=\"language-text\">sbt</code></li>\n<li>Install IntelliJ or whatever and your themes (those are important.  We can have a Bad Time™️ but dammit, it's going to be a Bad Time™️ in One Dark Classic)</li>\n<li>Install the correct distribution of Java.  Really have fun with this one.  Make sure you're in a padded, soundproof room so you don't disturb anyone when you throw your phone at the wall when you get another OOM alert.<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></li>\n<li>Create a new sbt project from your IDE.  This is tricky because you really <em>want</em> to believe that it's smarter than you.  And it probably is if the thing you want to do is the same as the thing it wants to do, but you're probably not aligned, so pay attention (I wish I could tell you to what, but it's a crapshoot)</li>\n</ol>\n<p>Now, your organizations testing enforcement will almost certainly vary, but it's probably dumb and makes use of some testing interface that's exposed to the developer so they can make improvements themselves without blindly fumbling around the codebase.  For example, one such unnamed coverage enforcement service (fed tool tbh) can be configured to read and evaluate coverage from a report generated by the <code class=\"language-text\">sbt-scoverage</code> plugin.  For no reason in particular we're going to use this and jimmy together some totally-not-contrived classes, accompanying tests, and then the solution to our problem.  The remainder of the blog is implementation detail, but the underlying idea remains the same throughout.  </p>\n<p>Your blank canvas should look <em>something</em> like this:<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup></p>\n<div class=\"gatsby-highlight\" data-language=\"zsh\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-zsh line-numbers\"><code class=\"language-zsh\">  √ 12 [0:28:08] github/goodharts-law (master) δ tree\n  .\n  ├── build.sbt\n  ├── project\n  │   ├── plugins.sbt\n  │   ├── project/\n  │   └── target/\n  ├── src\n  │   ├── main/scala/com/murphypone/\n  │   |   └── # this is where jank will have already been committed\n  │   └── test/scala/com/murphypone/\n  │       └── # this is where we&#39;re going to put our lies\n  ├── target\n  │   ├── global-logging/\n  │   ├── scala-2.12classes\n  │   │   │   └── com/murphypone/\n  │   |   |       └── # vestiges of jank\n  │   │   ├── coverage-report/\n  │   │   ├── scoverage-data/\n  │   │   ├── scoverage-report/\n  │   │   │   ├── com.murphypone.package.html\n  │   │   │   ├── index.html\n  │   │   │   ├── overview.html\n  │   │   │   ├── packages.html\n  │   │   │   └── scoverage.xml\n  .   .   .</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Mainly we're concerned about the <code class=\"language-text\">build.sbt</code> and the <code class=\"language-text\">plugins.sbt</code> wherever they're located in your project. </p>\n<p>I'm sure there's a numerous, coherent examples of what a good <code class=\"language-text\">build.sbt</code> looks like.  And they probably will look much different than the disgusting thing I'm about to show you.  That's really cool: how flexible and non-standard the build configuration file is in SBT.  It's a great place to showcase some self-expression and really just deviate from the beaten path (on accident or on purpose, hard to say, really).  It's challenging to make CMake look appealing, but SBT really outdoes itself here. </p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">ThisBuild <span class=\"token operator\">/</span> version <span class=\"token operator\">:</span><span class=\"token operator\">=</span> <span class=\"token string\">\"0.1.0-SNAPSHOT\"</span>\nThisBuild <span class=\"token operator\">/</span> scalaVersion <span class=\"token operator\">:</span><span class=\"token operator\">=</span> <span class=\"token string\">\"2.12.1\"</span> <span class=\"token comment\">// † </span>\nThisBuild <span class=\"token operator\">/</span> organization <span class=\"token operator\">:</span><span class=\"token operator\">=</span> <span class=\"token string\">\"murphypone\"</span>\n\ninConfig<span class=\"token punctuation\">(</span>Compile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>\n  Seq<span class=\"token punctuation\">(</span>\n    scalacOptions <span class=\"token operator\">++</span><span class=\"token operator\">=</span> Seq<span class=\"token punctuation\">(</span> <span class=\"token comment\">// †† don't need</span>\n      <span class=\"token string\">\"-Xexperimental\"</span><span class=\"token punctuation\">,</span> \n      <span class=\"token string\">\"-language:higherKinds\"</span><span class=\"token punctuation\">,</span> \n      <span class=\"token string\">\"-Xfatal-warnings\"</span>\n    <span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ††† known incantation</span>\n<span class=\"token keyword\">lazy</span> <span class=\"token keyword\">val</span> testSettings <span class=\"token operator\">=</span> inConfig<span class=\"token punctuation\">(</span>Test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>\n  Seq<span class=\"token punctuation\">(</span>fork <span class=\"token operator\">:</span><span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> testOptions <span class=\"token operator\">+=</span> Tests<span class=\"token punctuation\">.</span>Argument<span class=\"token punctuation\">(</span>TestFrameworks<span class=\"token punctuation\">.</span>ScalaTest<span class=\"token punctuation\">,</span> <span class=\"token string\">\"-o\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-u\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"target/test-reports/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">lazy</span> <span class=\"token keyword\">val</span> root <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>project in file<span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span>settings<span class=\"token punctuation\">(</span>\n    name <span class=\"token operator\">:</span><span class=\"token operator\">=</span> <span class=\"token string\">\"goodharts-law\"</span><span class=\"token punctuation\">,</span>\n    libraryDependencies <span class=\"token operator\">++</span><span class=\"token operator\">=</span> Seq<span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"org.scalatest\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">%</span> <span class=\"token string\">\"scalatest\"</span> <span class=\"token operator\">%</span> <span class=\"token string\">\"3.2.11\"</span>\n      <span class=\"token string\">\"org.scalacheck\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">%</span> <span class=\"token string\">\"scalacheck\"</span> <span class=\"token operator\">%</span> <span class=\"token string\">\"1.17.0\"</span>\n<span class=\"token comment\">//      scalaCheck % Test</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    testSettings\n  <span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>†: good luck choosing the right scala version for you.  It's not at all a contentious topic of debate</li>\n<li>††: you probably certainly don't need these, I just prefer them.  </li>\n<li>†††: this is just some incantantion you need to know or be lucky enough to find.  Don't worry, there's only like a thousand of them you need to keep track of when working with SBT.<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup></li>\n</ul>\n<p>and in the <code class=\"language-text\">plugins.sbt</code>, we have our coverage report provider <code class=\"language-text\">sbt-scoverage</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\">addSbtPlugin<span class=\"token punctuation\">(</span><span class=\"token string\">\"org.scoverage\"</span> <span class=\"token operator\">%</span> <span class=\"token string\">\"sbt-scoverage\"</span> <span class=\"token operator\">%</span> <span class=\"token string\">\"1.6.1\"</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Phew, I hope that works for you. </p>\n<h2>Not a Contrived Example</h2>\n<p>My muse as of late, dear reader, is Gogurt and it's acquisition by any means necessary.  Including from the clutches of starving children.  Scala is the perfect language to use for such a dastardly task.  Because we've spent a lot of time thinking about how we might scale this service to nab other snacks in the future, we wish to design our service somewhat generically.  Actually this is dumb – this code doesn't really matter at all. Here's some sample code we're going to write crappy tests for:</p>\n<h3>src/main/scala/&#x3C;org.projectname>/models</h3>\n<p>First, a model of our target: <code class=\"language-text\">Gogurt.scala</code></p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>murphypone<span class=\"token punctuation\">.</span>models</span>\n\n<span class=\"token keyword\">sealed</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> Gogurt<span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> value<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> toReasonableWebFmt<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">object</span> Gogurt <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">case</span> <span class=\"token keyword\">object</span> Strawberry <span class=\"token keyword\">extends</span> Gogurt<span class=\"token punctuation\">(</span><span class=\"token string\">\"strawberry\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">def</span> toReasonableWebFmt<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> s<span class=\"token triple-quoted-string string\">\"\"\"{ \"value\": \"$value\" }\"\"\"</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">case</span> <span class=\"token keyword\">object</span> Vanilla <span class=\"token keyword\">extends</span> Gogurt<span class=\"token punctuation\">(</span><span class=\"token string\">\"vanilla\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">def</span> toReasonableWebFmt<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> s<span class=\"token triple-quoted-string string\">\"\"\"{ \"value\": \"$value\" }\"\"\"</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">case</span> <span class=\"token keyword\">object</span> Banana <span class=\"token keyword\">extends</span> Gogurt<span class=\"token punctuation\">(</span><span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">def</span> toReasonableWebFmt<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> s<span class=\"token triple-quoted-string string\">\"\"\"{ \"value\": \"$value\" }\"\"\"</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">case</span> <span class=\"token keyword\">object</span> Mango <span class=\"token keyword\">extends</span> Gogurt<span class=\"token punctuation\">(</span><span class=\"token string\">\"Mango\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">def</span> toReasonableWebFmt<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> s<span class=\"token triple-quoted-string string\">\"\"\"{ \"value\": \"$value\" }\"\"\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Then the generic <code class=\"language-text\">TheftService.scala</code></p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>murphypone<span class=\"token punctuation\">.</span>models</span>\n\n<span class=\"token comment\">/** \n  * Service abstraction for maximizing starvation \n  * over some collection of people objects with ordered preferences \n  */</span>\n<span class=\"token keyword\">trait</span> TheftService<span class=\"token punctuation\">[</span>F<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">/** \n    * Given a sequences of preferences of ~some item~, \n    * determine which flavor to steal causes the most harm \n    */</span>\n  <span class=\"token keyword\">def</span> steal<span class=\"token punctuation\">(</span>preferences<span class=\"token operator\">:</span> Seq<span class=\"token punctuation\">[</span>Seq<span class=\"token punctuation\">[</span>F<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> F\n\n  <span class=\"token comment\">/** \n   * Get weighted preferences from our subjects\n   */</span>\n  <span class=\"token keyword\">def</span> weightedPreferences<span class=\"token punctuation\">(</span>preferences<span class=\"token operator\">:</span> Seq<span class=\"token punctuation\">[</span>Seq<span class=\"token punctuation\">[</span>F<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Seq<span class=\"token punctuation\">[</span>F<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>src/main/scala/&#x3C;org.projectname>/impl</h3>\n<p>Then the specific instance of our Gogurt stealing service: <code class=\"language-text\">GogurtTheftService.scala</code> </p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>murphypone<span class=\"token punctuation\">.</span>impl</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>murphypone<span class=\"token punctuation\">.</span>models</span><span class=\"token punctuation\">.</span>Gogurt<span class=\"token punctuation\">.</span>_\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>murphypone<span class=\"token punctuation\">.</span>models</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span>Gogurt<span class=\"token punctuation\">,</span> TheftService<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span>Random\n\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> HungryChild<span class=\"token punctuation\">[</span>F<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> flavorPreferences<span class=\"token operator\">:</span> Seq<span class=\"token punctuation\">[</span>F<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> toString<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span>\n    s\"I<span class=\"token symbol\">'m</span> just a wee little lad named $name of age $age \n      who likes my snacks in the following<span class=\"token punctuation\">,</span> descending order<span class=\"token operator\">:</span> $flavorPreferences\"\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// generic gogurt class</span>\n<span class=\"token keyword\">class</span> GogurtTheftService<span class=\"token punctuation\">[</span>G <span class=\"token operator\">&lt;</span><span class=\"token operator\">:</span> Gogurt<span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> TheftService<span class=\"token punctuation\">[</span>G<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> steal<span class=\"token punctuation\">(</span>preferences<span class=\"token operator\">:</span> Seq<span class=\"token punctuation\">[</span>Seq<span class=\"token punctuation\">[</span>G<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> G <span class=\"token operator\">=</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span>\n\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> weightedPreferences<span class=\"token punctuation\">(</span>preferences<span class=\"token operator\">:</span> Seq<span class=\"token punctuation\">[</span>Seq<span class=\"token punctuation\">[</span>G<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Seq<span class=\"token punctuation\">[</span>G<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// want strawberry 😈</span>\n<span class=\"token keyword\">class</span> StrawberryGogurtTheftService <span class=\"token keyword\">extends</span> GogurtTheftService<span class=\"token punctuation\">[</span>Gogurt<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> steal<span class=\"token punctuation\">(</span>preferences<span class=\"token operator\">:</span> Seq<span class=\"token punctuation\">[</span>Seq<span class=\"token punctuation\">[</span>Gogurt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Gogurt <span class=\"token operator\">=</span> Strawberry\n\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> weightedPreferences<span class=\"token punctuation\">(</span>preferences<span class=\"token operator\">:</span> Seq<span class=\"token punctuation\">[</span>Seq<span class=\"token punctuation\">[</span>Gogurt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Seq<span class=\"token punctuation\">[</span>Gogurt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n    List<span class=\"token punctuation\">(</span>Strawberry<span class=\"token punctuation\">)</span> <span class=\"token operator\">++</span> Random<span class=\"token punctuation\">.</span>shuffle<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">(</span>Mango<span class=\"token punctuation\">,</span> Vanilla<span class=\"token punctuation\">,</span> Banana<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Delightful.  We're on our way to getting so much freaking gogurt. Unreal.  Surely there will be no adverse consequences from our actions.  As the well-meaning junior SWE we are, <em>before we even wire this puppy up</em> let's now write some unit tests to make sure our <code class=\"language-text\">StrawberryGogurtTheftService</code> behaves correctly.</p>\n<h3>test/scala/&#x3C;org.projectname>/</h3>\n<p>Let's define a <code class=\"language-text\">BaseSpec.scala</code> which our other unit test files can inherit from so we don't have repeated imports throughout our tests:</p>\n<p>Again, YMMV and if you're a sadist, this is a great time to experiment with new ideas.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>murphypone</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>scalatest</span><span class=\"token punctuation\">.</span>Inside\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>scalatest<span class=\"token punctuation\">.</span>flatspec</span><span class=\"token punctuation\">.</span>AnyFlatSpec\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>scalatest<span class=\"token punctuation\">.</span>matchers<span class=\"token punctuation\">.</span>should</span><span class=\"token punctuation\">.</span>Matchers\n\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> BaseSpec <span class=\"token keyword\">extends</span> AnyFlatSpec <span class=\"token keyword\">with</span> Matchers <span class=\"token keyword\">with</span> Inside</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>And then of course our <code class=\"language-text\">GogurtTheftServiceSpec.scala</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>murphypone</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>murphypone<span class=\"token punctuation\">.</span>impl</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span>HungryChild<span class=\"token punctuation\">,</span> StrawberryGogurtTheftService<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>murphypone<span class=\"token punctuation\">.</span>models</span><span class=\"token punctuation\">.</span>Gogurt\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>murphypone<span class=\"token punctuation\">.</span>models</span><span class=\"token punctuation\">.</span>Gogurt<span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span>Banana<span class=\"token punctuation\">,</span> Mango<span class=\"token punctuation\">,</span> Strawberry<span class=\"token punctuation\">,</span> Vanilla<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> GogurtTheftServiceSpec <span class=\"token keyword\">extends</span> BaseSpec <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">val</span> sut <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> StrawberryGogurtTheftService\n  <span class=\"token keyword\">val</span> hc1<span class=\"token operator\">:</span> HungryChild<span class=\"token punctuation\">[</span>Gogurt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> HungryChild<span class=\"token punctuation\">(</span>\n    name <span class=\"token operator\">=</span> <span class=\"token string\">\"marcus\"</span><span class=\"token punctuation\">,</span> \n    age <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> \n    flavor <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span>Mango<span class=\"token punctuation\">,</span> Strawberry<span class=\"token punctuation\">,</span> Vanilla<span class=\"token punctuation\">,</span> Banana<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">val</span> hc2<span class=\"token operator\">:</span> HungryChild<span class=\"token punctuation\">[</span>Gogurt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> HungryChild<span class=\"token punctuation\">(</span>\n    name <span class=\"token operator\">=</span> <span class=\"token string\">\"marcus\"</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// same name and age, I literally don't care </span>\n    age <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> \n    flavor <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span>Vanilla<span class=\"token punctuation\">,</span> Banana<span class=\"token punctuation\">,</span> Mango<span class=\"token punctuation\">,</span> Strawberry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  it should <span class=\"token string\">\"select Strawberry irrespective of the given preferences\"</span> in <span class=\"token punctuation\">{</span>\n    sut<span class=\"token punctuation\">.</span>steal<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">(</span>hc1<span class=\"token punctuation\">.</span>flavorPreferences<span class=\"token punctuation\">,</span> hc2<span class=\"token punctuation\">.</span>flavorPreferences<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> shouldBe Strawberry\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>blah blah blah.  If we spawn an <code class=\"language-text\">sbt</code> shell and run the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"zsh\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-zsh line-numbers\"><code class=\"language-zsh\">sbt:goodharts-law&gt; ;clean;coverage;test;coverageReport</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>we get some nifty lil test coverage report files in our <code class=\"language-text\">target/scala-2.12/scoverage-report</code> directory that might look like the following:</p>\n<p><img src=\"/images/goodhart-1.png\"></p>\n<details>\n  <summary><strong><u class=\"my-link\">hmm, things aren't looking good for us if we open a PR</u></strong></summary>\n  \n  <img src=\"https://media.tenor.com/sMQAhDrXU_oAAAAM/ep.gif\" width=100%>\n</details>\n<br>\n<p>Now, in this case, it's glaringly obvious that we could simply write some more useless tests against our equally useless code.  But what if you're in the definitely-ficticious-and-didn't-happen-to-me situation described above?  Are you going to try to grok a testing library and methodology to move the needle by 1.3% so your PR isn't blocked in a high-stress situation?</p>\n<p>(If you're reading this and are one of my coworkers, I just want to say: obviously I would take the time to do a good job 👍👍👍 you can click away now).</p>\n<details>\n  <summary><strong><u class=\"my-link\">Yes, of course, I'm a good little lad.</u></strong></summary>\n  \n  <img src=\"https://media.tenor.com/10i4quIbVEoAAAAC/absolutely-not-nope.gif\" width=100%>\n</details>\n<br>\n<h2>6σ Test Coverage Babyyyyy!</h2>\n<p>The plan is simple:  </p>\n<ol>\n<li>Write a stupid class with a method that supposedly has lots of statements and lots of branching, </li>\n<li>Write a test to verify <em>anything at all</em> while invoking that method,</li>\n<li>Automate its proliferation </li>\n</ol>\n<h3>Write a Stupid Class</h3>\n<p><em>Peter... It looks like every class you've written so far is pretty stupid</em> </p>\n<blockquote>\n<p>shut up</p>\n</blockquote>\n<p>In a new package, I'll create the prototype <code class=\"language-text\">PunkBuster.scala</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>murphypone<span class=\"token punctuation\">.</span>punkbuster</span>\n\n<span class=\"token keyword\">class</span> PunkBuster <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">def</span> doHardThing<span class=\"token punctuation\">(</span>coin<span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Long</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    total <span class=\"token operator\">=</span> total <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>coin<span class=\"token punctuation\">)</span> total <span class=\"token operator\">=</span> total <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    \n    total \n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Take note senior engineers, this is actually the only good place in the whole codebase so far where being devious and creative is a good thing.</p>\n<h3>Write a Stupid Spec for the Stupid Class</h3>\n<p>As promised, a stupid spec to exercise <em>all</em> those branching code paths:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>murphypone<span class=\"token punctuation\">.</span>punkbuster</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>murphypone</span><span class=\"token punctuation\">.</span>BaseSpec\n\n<span class=\"token keyword\">class</span> PunkBusterSpec <span class=\"token keyword\">extends</span> BaseSpec <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> pb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> PunkBuster\n  it should <span class=\"token string\">\"improve test coverage\"</span> in <span class=\"token punctuation\">{</span>\n\n    pb<span class=\"token punctuation\">.</span>doHardThing<span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> should not be <span class=\"token number\">0</span>\n    pb<span class=\"token punctuation\">.</span>doHardThing<span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> should not be <span class=\"token number\">0</span>\n\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Great, now if we run the tests and coverage report again we might see a fraction of coverage improvement.  The naive fix to see instant mega-gains would be to copy/paste like a hundred thousand more <code class=\"language-text\">if (coin) total = total + 1</code> lines into the <code class=\"language-text\">PunkBuster</code> class.  Your editor will probably lock up around half a million lines copied to your clipboard, this may be the first instance of cowardice we encounter on our journey into darkness.  Let's write a script to do this for us.  </p>\n<h2>now this is podracing</h2>\n<p>Since we've already relegated ourselves to Scala-land, we'll continue here, though what I'm about to present resembles a script moreso than anything that Brooks Curry would recgonize as functional behavior.</p>\n<p>Our project thus far doesn't yet have a <code class=\"language-text\">Main</code> function, so I'll just cannabalize that reservation.  It was never about stealing gogurts, the <em>main</em> purpose was to fib.</p>\n<p>Somewhere in the project, I'll throw down a <code class=\"language-text\">CoverageImprover.scala</code> object with a <code class=\"language-text\">main</code> definition in it which will parse (if you can call what we're about to do <em>parsing</em>) the coverage report to give us info about the lines of code in our file.  Now, at time of writing this, I haven't actually done anything with that information, but the idea is that you could improve upon the idea by tweaking the length and volume of fluffer <code class=\"language-text\">PunkBuster</code>s to precisely meet some amount of target coverage so as not to tip-off the powers that be to your craftiness – after all, near-perfect code coverage is nigh impossible to achieve legitimately.  But this section isn't called \"76% Coverage\" dammit, it's called <strong>6σ</strong> and that's what I intend to hit.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-scala line-numbers\"><code class=\"language-scala\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>murphypone<span class=\"token punctuation\">.</span>coverage</span>\n\n<span class=\"token comment\">// import anything and everything, I'd import *._ if I could.  God is dead, and sbt-coverage killed him</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">net<span class=\"token punctuation\">.</span>ruippeixotog<span class=\"token punctuation\">.</span>scalascraper<span class=\"token punctuation\">.</span>browser</span><span class=\"token punctuation\">.</span>JsoupBrowser <span class=\"token comment\">// soup 🤗</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">object</span> CoverageImprover <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// path to coverage output file</span>\n    <span class=\"token keyword\">val</span> browser <span class=\"token operator\">=</span> JsoupBrowser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> doc <span class=\"token operator\">=</span> browser<span class=\"token punctuation\">.</span>parseFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"target/scala-2.12/scoverage-report/overview.html\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// yes, import a whole DOM traversal library and then do manual string splitting </span>\n    <span class=\"token comment\">// no, do not intelligently use this API to target specific table rows</span>\n    <span class=\"token comment\">// it's important here that you do a real bang up job</span>\n    <span class=\"token comment\">// don't want to give off the wrong impression</span>\n    <span class=\"token keyword\">val</span> all <span class=\"token operator\">=</span> doc <span class=\"token operator\">>></span> allText\n\n    <span class=\"token comment\">// this would be where you do something worthwhile with statistics</span>\n    <span class=\"token keyword\">val</span> linesOfCodeMatcher <span class=\"token operator\">=</span> <span class=\"token string\">\"Lines of code: (\\\\d)+\"</span><span class=\"token punctuation\">.</span>r\n\n    linesOfCodeMatcher<span class=\"token punctuation\">.</span>findFirstMatchIn<span class=\"token punctuation\">(</span>all<span class=\"token punctuation\">)</span> <span class=\"token keyword\">match</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> Some<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span>\n        <span class=\"token keyword\">val</span> lines <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">.</span>substring<span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>trim\n        println<span class=\"token punctuation\">(</span>s<span class=\"token string\">\"Lines of code: ${lines.toInt}\"</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">case</span> None <span class=\"token keyword\">=></span> println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Lines of code: not found\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// configurable helper method to create new PunkBuster classes</span>\n    <span class=\"token keyword\">def</span> writePunkBuster<span class=\"token punctuation\">(</span>fileIndex<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">val</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> File<span class=\"token punctuation\">(</span>s<span class=\"token string\">\"src/main/scala/com/murphypone/punkbuster/${genFileName(fileIndex, false)}\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">val</span> bw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> BufferedWriter<span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> FileWriter<span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n      bw<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>s<span class=\"token triple-quoted-string string\">\"\"\"package com.murphypone.punkbuster\n          |\n          |class PunkBuster$fileIndex {\n          |  def doHardThing(coin: Boolean): Long = {\n          |    var total = 1\n          |\"\"\"</span><span class=\"token punctuation\">.</span>stripMargin<span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>_ <span class=\"token keyword\">&lt;-</span> <span class=\"token number\">1</span> to n<span class=\"token punctuation\">)</span>\n        bw<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"    if (coin) total = total + 1\\n\"</span><span class=\"token punctuation\">)</span>\n\n      bw<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>s<span class=\"token triple-quoted-string string\">\"\"\"   total // $n\n           |  }\n           |}\n           |\"\"\"</span><span class=\"token punctuation\">.</span>stripMargin<span class=\"token punctuation\">)</span>\n      bw<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// helper to write the corresponding specs</span>\n    <span class=\"token keyword\">def</span> writePunkBusterSpec<span class=\"token punctuation\">(</span>fileIndex<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">val</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> File<span class=\"token punctuation\">(</span>s<span class=\"token string\">\"src/test/scala/com/murphypone/punkbuster/${genFileName(fileIndex, true)}\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">val</span> bw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> BufferedWriter<span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> FileWriter<span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n      bw<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>s<span class=\"token triple-quoted-string string\">\"\"\"package com.murphypone.punkbuster\n                  |\n                  |import com.murphypone.BaseSpec\n                  |\n                  |class PunkBuster${fileIndex}Spec extends BaseSpec {\n                  |  val pb = new PunkBuster$fileIndex\n                  |  it should \"fuck up test coverage\" in {\n                  |\n                  |    pb.doHardThing(true) should not be 0\n                  |    pb.doHardThing(false) should not be 0\n                  |\n                  |  }\n                  |\n                  |}\n                  |\"\"\"</span><span class=\"token punctuation\">.</span>stripMargin<span class=\"token punctuation\">)</span>\n\n      bw<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// instead of writing one big file, let's write many medium sized files</span>\n    <span class=\"token comment\">// could add some noise here (along with the name and placement of these specs) </span>\n    <span class=\"token comment\">// this is a weak form of obfuscation though, and at this point the more care</span>\n    <span class=\"token comment\">// we employ in covering our tracks, the less plausible-deniability we retain</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">&lt;-</span> <span class=\"token number\">1</span> to <span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      writePunkBuster<span class=\"token punctuation\">(</span>fileIndex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> \n      writePunkBusterSpec<span class=\"token punctuation\">(</span>fileIndex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>I think 1k is a good round limit for filesize before the JVM starts to tap out.  10K is not kosher on my machine with out-of-the-box JVM configurations.  Even 1K is too much for some of the IntelliJ plugins I have installed though:</p>\n<p><img src=\"/images/goodhart-2.png\"></p>\n<p>Coward!</p>\n<p>Additionally, writing files much larger than 1,000 lines long may upset the JVM:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">[error] Could not write class com/murphypone/punkbuster/PunkBuster1 because it exceeds JVM code size limits. Method doHardThing&#39;s code too large!</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Coward!</p>\n<p>(Incidentally, the JVM has no problem actually <em>writing</em> this file which you can see for yourself by viewing the huge file, it just fails to interpret it as a class.)</p>\n<p>Now, we could either find and adjust whatever JVM flag is preventing us from writing a singular 6σ test, or we can just write several files</p>\n<p>But even just writing that many files at once might cause some issues: </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">[error] GC overhead limit exceeded\njava.lang.OutOfMemoryError: GC overhead limit exceeded</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>Coward!</p>\n<p>Eventually, you'll find some settings that work for you, or just <code class=\"language-text\">run</code> the script a couple of times with higher indices.  </p>\n<p>Anyways, our cheerful output now resembles something like this:</p>\n<p><img src=\"/images/goodhart-3.png\"></p>\n<center>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/O2yPnnDfqpw\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n</center>\n<p>Merged, logged off, snoozed, put on do not disturb ✌️</p>\n<h2>Conclusion</h2>\n<p>It is not recommended that you do this unless you want a stern warning from the security folks at your organization.</p>\n<p>\"But Peter,\" you might ask \"didn’t it take longer to write all this than to just write a unit test?\" no, dear reader, ... no. Behold the joy of industry software engineering.  </p>\n<p>To summarize:</p>\n<ul>\n<li>SBT sucks</li>\n<li>6σ test coverage is easy</li>\n<li>don't get caught</li>\n</ul>\n<h2>Next time</h2>\n<blockquote>\n<p>getting a CI user to commit these changes so your name isn't on the blame</p>\n</blockquote>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://sdkman.io/jdks#librca\">sdkman</a> helps with this. Note to self: <code class=\"language-text\">sdk install java 8.0.362.fx-librca</code></p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>I've cleaned up the output of the tree command because there's more chaff in it's output than useful information.  </p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-3\">\n<p>††††: <a href=\"http://printwiki.org/Footnote\">Allegedly</a>, it's inappropriate to use the double-double dagger unless one first exhausted the asterisk, single dagger, double dagger, paragraph symbol, section mark, parallel rules, number sign, and the doubles of each.  However, <a href=\"https://www.youtube.com/watch?v=UqS_tH2O7FY\">double-double daggers</a> are way cooler than regular footnotes  </p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","frontmatter":{"date":"05 March, 2023","path":"/blog/goodharts-law","title":"47 | Goodhart's Law"},"fields":{"readingTime":{"text":"18 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}