{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/fibonacci-fun","result":{"data":{"markdownRemark":{"html":"<h1>What / Why?</h1>\n<p>In this article we're going to take a look at a fascinating relationship between Fibonacci numbers and unit conversion while also learning some Python tools along the way.</p>\n<h1>Setup</h1>\n<p>For this project we're going to use <a href=\"https://www.python.org/downloads/\">Python 3.7</a> as well as a powerful graphing library developed by Facebook called <a href=\"https://github.com/facebookresearch/visdom\">visdom</a>.</p>\n<p>The general workflow for this setup is to initialize a terminal window in your working directory and execute the command <code class=\"language-text\">visdom</code>.  On success, you should see something like :</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">$ visdom\nChecking for scripts.\nIt&#39;s Alive!\nINFO:root:Application Started\nYou can navigate to http://localhost:8097</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>We can leave this running in the background and occasionally check in on it if we're getting Visdom related errors.  Open another tab in your shell,  navigate back to the working directory of the project, and open your preferred editor!   </p>\n<h1>Code!</h1>\n<p>Let's identify our goal: we want to generate fibonacci numbers and graph how sequential numbers in the sequence compare to mile --> kilometer conversions.  To do this, we first need to generate fibonacci numbers as well as create some methods to allow us to convert between our two units:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># Imports</span>\n    <span class=\"token comment\"># none, for now</span>\n\n<span class=\"token comment\"># Constants</span>\nkm_per_mi <span class=\"token operator\">=</span> <span class=\"token number\">1.60934</span>\nmi_per_km <span class=\"token operator\">=</span> <span class=\"token number\">0.621371</span>\n\n<span class=\"token comment\"># Fibonacci number generator</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid input\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">elif</span> n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> fib<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fib<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Convert km to mi</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">km_to_mi</span><span class=\"token punctuation\">(</span>km<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> km <span class=\"token operator\">*</span> mi_per_km\n\n<span class=\"token comment\"># Convert mi to km</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">mi_to_km</span><span class=\"token punctuation\">(</span>mi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> mi <span class=\"token operator\">*</span> km_per_mi\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fib<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>We can test our method by calling <code class=\"language-text\">print(fib(6))</code> at the bottom of our main.py which should output <code class=\"language-text\">5</code> which is correct according to our definition.</p>\n<p>Now, in order to examine the relationship between Fibonacci numbers and miles-kilometers, let's set up a temporary example:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">mi <span class=\"token operator\">=</span> fib<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\nkm <span class=\"token operator\">=</span> mi_to_km<span class=\"token punctuation\">(</span>fib<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>mi<span class=\"token punctuation\">,</span> km<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>Executing our program now we should see <code class=\"language-text\">5 8.0467</code>, and validating our results with a quick Google, we can see that Fibonacci may have been on one.</p>\n<p><img src=\"https://i.imgur.com/LQ3njx8.png\" alt=\"img1\"></p>\n<p>(This is because the a decimal approximation of the Golden Ratio is <em>very</em> close to our <code class=\"language-text\">km_per_mi</code> constant: 1.60934)</p>\n<p>So now let's write a method to calculate the error between the <em>actual</em> conversion using the constant provided by Google and the Fibonacci sequence.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># calculate the %error between the  fib #</span>\n<span class=\"token comment\"># and the actual conversion number using fib(n), fib(n+1)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">loss</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    mi <span class=\"token operator\">=</span> fib<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n    fib_km <span class=\"token operator\">=</span> fib<span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    actual_km <span class=\"token operator\">=</span> mi_to_km<span class=\"token punctuation\">(</span>mi<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>actual_km <span class=\"token operator\">-</span> fib_km<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> actual_km<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Let's test this: <code class=\"language-text\">print(loss(6)) --&gt; 0.5803621360309136</code></p>\n<p>By hand: fib(6) = 5, fib(7) = 8, actual_km = 8.0467</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mfrac><mrow><mn>8.0467</mn><mo>−</mo><mn>8</mn></mrow><mn>8.0467</mn></mfrac><mi mathvariant=\"normal\">∣</mi><mo>×</mo><mn>100</mn><mo>=</mo><mn>0.58</mn><mi mathvariant=\"normal\">%</mi></mrow><annotation encoding=\"application/x-tex\">\\vert \\frac {8.0467-8}{8.0467} \\vert \\times 100 = 0.58\\%</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">8</span><span class=\"mord mtight\">.</span><span class=\"mord mtight\">0</span><span class=\"mord mtight\">4</span><span class=\"mord mtight\">6</span><span class=\"mord mtight\">7</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">8</span><span class=\"mord mtight\">.</span><span class=\"mord mtight\">0</span><span class=\"mord mtight\">4</span><span class=\"mord mtight\">6</span><span class=\"mord mtight\">7</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">8</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mord\">8</span><span class=\"mord\">%</span></span></span></span> off the mark.  Pretty good!</p>\n<p>So now let's take a step back and figure out how we're going to visualize this.</p>\n<p>Let's make a new file called <code class=\"language-text\">visualize.py</code> and explore what Visdom has to offer us.</p>\n<p>Off the bat, we're going to need some imports and a simple method to build lines for us that we can send the Visdom local server that's been running in the background:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> visdom <span class=\"token keyword\">import</span> Visdom\n\nviz <span class=\"token operator\">=</span> Visdom<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  <span class=\"token comment\"># holds all our graphs</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_line</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'#000'</span><span class=\"token punctuation\">,</span> isFilled<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> fillcolor<span class=\"token operator\">=</span><span class=\"token string\">'transparent'</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> showlegend<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> isFilled<span class=\"token punctuation\">:</span>\n        fill <span class=\"token operator\">=</span> <span class=\"token string\">'tonexty'</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        fill <span class=\"token operator\">=</span> <span class=\"token string\">'none'</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>\n        x<span class=\"token operator\">=</span>x<span class=\"token punctuation\">,</span>\n        y<span class=\"token operator\">=</span>y<span class=\"token punctuation\">,</span>\n        mode<span class=\"token operator\">=</span><span class=\"token string\">'lines'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token string\">'custom'</span><span class=\"token punctuation\">,</span>\n        line<span class=\"token operator\">=</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>\n            color<span class=\"token operator\">=</span>color<span class=\"token punctuation\">,</span>\n            width<span class=\"token operator\">=</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        fill<span class=\"token operator\">=</span>fill<span class=\"token punctuation\">,</span>\n        fillcolor<span class=\"token operator\">=</span>fillcolor<span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">,</span>\n        showlegend<span class=\"token operator\">=</span>showlegend\n    <span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This might look a bit intimidating at first, but if we break down this method, we can see that it simply builds a dictionary from all the arguments in the format that Visdom is expecting.  This will be useful when we write our method to display the % error of our heuristic loss function.</p>\n<p>We want to plot the error of the the conversion heuristic the further the fibonacci sequence progresses.  With that in mind, let's dive in:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">plot_error</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> xaxis<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'#000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    win <span class=\"token operator\">=</span> name\n    title <span class=\"token operator\">=</span> name\n\n    <span class=\"token keyword\">if</span> name <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> d<span class=\"token punctuation\">:</span>\n        d<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    d<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>d<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>get_line<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n    layout <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>\n        title<span class=\"token operator\">=</span>title<span class=\"token punctuation\">,</span>\n        xaxis<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">:</span> xaxis<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        yaxis<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">:</span> title<span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n\n    viz<span class=\"token punctuation\">.</span>_send<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">,</span> <span class=\"token string\">'layout'</span><span class=\"token punctuation\">:</span> layout<span class=\"token punctuation\">,</span> <span class=\"token string\">'win'</span><span class=\"token punctuation\">:</span> win<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This method simply accepts a few more arguments, fetches a line based on our input arguments, and once again packages them up into the dictionary format Visdom is expecting.  The final line actually <em>sends</em> this dictionary to our local visdom server where it will be plotted.  </p>\n<p>Let's jump pack into our main.py file to make this happen.</p>\n<p>We need to link the visualize.py file, and add the time module while we're at it which will be useful in a moment.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">from</span> visualize <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>Now, down at the bottom of our file, let's add a while loop that will continuously generate new Fibonacci numbers and graph the error as a function of the Fibonacci index.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">i <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  e <span class=\"token operator\">=</span> loss<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n  plot_error<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> <span class=\"token string\">'Error'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'fibonacci index'</span><span class=\"token punctuation\">)</span>\n  time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span>\n  i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Now, when we execute our program and visit the local Visdom page: <code class=\"language-text\">http://localhost:8097/</code> we should see a graph our graph develop in real time!.</p>\n<p><img src=\"https://i.imgur.com/YHtrnSc.gif\" alt=\"gif1\"></p>\n<p>Cool.  But as you'll be able to tell, our recursive fib function isn't going to be able to keep up.  Let's save our self the compute power and modify our code to read a list of pre-generated Fibonacci numbers and use that instead:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">load_fib</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">list</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fib.csv'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> fp<span class=\"token punctuation\">:</span>   \n        line <span class=\"token operator\">=</span> fp<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        cnt <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">while</span> line <span class=\"token keyword\">and</span> cnt <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># only grab the first 1000 digits from the file digits past that start to get to large to express</span>\n            line <span class=\"token operator\">=</span> fp<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            cnt <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This will read a file of Fibonacci numbers and add them to a list that we can iterate over much more quickly than recursively generating them would have taken.</p>\n<p>I generated my own list, but several are available online.  The method above assumes the file is of the format (\\n delimited):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">0\n1\n1\n2\n3\n5\n8\n13\n21\n34\n55\n89\n144\n233\n377\n610\n987\n1597\n...\netc.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Now we need to modify our while loop and loss function to reference this list instead of our original fib(n) method:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">loss</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    mi <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span>\n    fib_km <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    actual_km <span class=\"token operator\">=</span> mi_to_km<span class=\"token punctuation\">(</span>mi<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>actual_km <span class=\"token operator\">-</span> fib_km<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> actual_km<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span>\n\nfib <span class=\"token operator\">=</span> load_fib<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ni <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>fib<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    e <span class=\"token operator\">=</span> loss<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> fib<span class=\"token punctuation\">)</span>\n    plot_error<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> <span class=\"token string\">'Error'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'fibonacci index'</span><span class=\"token punctuation\">)</span>\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span>\n    i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>There you have it!  The graph itself is a bit lackluster as the the Fibonacci sequence converges on the conversion factor after 8 terms or so, but that just goes to show how useful the heuristic is!</p>\n<p>For the full source code to this project, checkout <a href=\"https://github.com/MurphyPone/fibo-converter\">this repo</a>.</p>","frontmatter":{"date":"11 October, 2019","path":"/blog/fibonacci-fun","title":"Fibonacci Numbers as Conversion Heuristics"},"fields":{"readingTime":{"text":"6 min read"}}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}