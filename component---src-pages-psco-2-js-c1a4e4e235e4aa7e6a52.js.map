{"version":3,"sources":["webpack:///./src/pages/psco2.js"],"names":["ThinContent","NavLink","Link","HomeLink","SiteHeader","Header","to","Layout","Container","Col","ImgContainer","Head","Description","getAlbum","a","fetch","then","data","json","response","console","log","length","IndexPage","React","useState","images","setImages","useEffect","res1","map","url","call","reversed","slice","reverse","images_left","filter","value","index","Arr","images_middle","images_right","siteTitle","title","keywords","id","src","alt","key","referrerPolicy","style","textAlign","width","color"],"mappings":"yNAUMA,EAAW,2HAMXC,EAAU,YAAOC,OAAP,sBAAH,+YA0BPC,EAAW,YAAOF,EAAP,sBAAH,yCAIRG,EAAU,uJAOVC,EAAS,kBACb,YAACD,EAAD,KACE,YAACJ,EAAD,KACE,qBACE,YAACG,EAAD,CAAUG,GAAG,KAAb,YACA,YAACL,EAAD,CAASK,GAAG,SAAZ,QACA,YAACL,EAAD,CAASK,GAAG,SAAZ,QACA,YAACL,EAAD,CAASK,GAAG,UAAZ,SACA,YAACL,EAAD,CAASK,GAAG,UAAZ,oBAMFC,EAAM,0IASNC,EAAS,sMAQTC,EAAG,uGAKHC,EAAY,oGAKZC,EAAI,oFAIJC,EAAW,qF,SAUFC,I,2EAAf,4BAAAC,EAAA,4DACmB,sCADnB,SAEyBC,MADN,uCAC2BC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAFhE,cAEQC,EAFR,OAIEC,QAAQC,IAAI,iBAAkBF,EAAUA,EAASG,QAJnD,kBAMS,CAAEL,KAAME,IANjB,4C,sBAkIeI,UAzHG,WAChB,MAA4BC,IAAMC,SAAS,MAApCC,EAAP,KAAeC,EAAf,KAoBA,GAnBAH,IAAMI,WAAU,YAGJ,uCAAG,8BAAAd,EAAA,sEACQD,IADR,QACLgB,EADK,QAGeZ,MAAQY,EAAKZ,KAAKK,OAAS,IAC7CH,EAAW,CAAEF,KAAMY,EAAKZ,MAC9BG,QAAQC,IAAIF,GACRA,EAASF,MAAQE,EAASF,KAAKK,OAAS,GAC1CK,EAAUR,EAASF,KAAKa,KAAI,SAAAC,GAAG,OAAIA,OAP5B,2CAAH,qDAWVC,KAGC,IAECN,EAAQ,CACV,IAAIO,EAAWP,EAAOQ,QAAQC,UACxBC,EAAcH,EAASI,QAAO,SAASC,EAAOC,EAAOC,GACzD,OAAOD,EAAQ,GAAM,KAGjBE,EAAgBR,EAASI,QAAO,SAASC,EAAOC,EAAOC,GAC3D,OAAOD,EAAQ,GAAM,KAGjBG,EAAeT,EAASI,QAAO,SAASC,EAAOC,EAAOC,GAC1D,OAAOD,EAAQ,GAAM,KAGvB,OACE,YAAChC,EAAD,KACE,YAACF,EAAD,CAAQsC,UAAU,SAClB,YAAC,IAAD,CACEC,MAAM,OACNC,SAAU,CAAC,WAAD,8CAEZ,YAAClC,EAAD,aACA,YAACC,EAAD,KACE,iGAIA,gGAMF,YAACJ,EAAD,KACE,YAACC,EAAD,KACG2B,EAAYN,KAAI,SAAAC,GAAG,OAClB,YAACrB,EAAD,KACE,mBACEoC,GAAG,QACHC,IAAKhB,EACLiB,IAAK,GACLC,IAAKlB,EACLmB,eAAe,qBAMvB,YAACzC,EAAD,KACGgC,EAAcX,KAAI,SAAAC,GAAG,OACpB,YAACrB,EAAD,KACE,mBACEoC,GAAG,QACHC,IAAKhB,EACLiB,IAAK,GACLC,IAAKlB,EACLmB,eAAe,qBAMvB,YAACzC,EAAD,KACGiC,EAAaZ,KAAI,SAAAC,GAAG,OACnB,YAACrB,EAAD,KACE,mBACEoC,GAAG,QACHC,IAAKhB,EACLiB,IAAK,GACLC,IAAKlB,EACLmB,eAAe,uBAS7B,OACE,YAAC3C,EAAD,KACE,YAAC,IAAD,CACEqC,MAAM,OACNC,SAAU,CAAC,WAAD,8CAEZ,YAAClC,EAAD,aAEA,mBAAKwC,MAAO,CAAEC,UAAW,WACvB,YAAC,IAAD,CAAcC,MAAM,MAAMC,MAAM,aAElC,YAAC9C,EAAD,KACE,YAACC,EAAD,MACA,YAACA,EAAD,MACA,YAACA,EAAD","file":"component---src-pages-psco-2-js-c1a4e4e235e4aa7e6a52.js","sourcesContent":["import React from \"react\"\n// import axios from \"axios\"\nimport { Link } from \"gatsby\"\nimport styled from \"@emotion/styled\"\nimport SEO from \"../components/seo\"\nimport { InfinitySpin } from \"react-loader-spinner\"\n// import 'react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n\n// gross\n\nconst ThinContent = styled.div`\n  max-width: 860px;\n  padding: 1rem 1.0875rem;\n  font-size: 1.2rem;\n`\n\nconst NavLink = styled(Link)`\n  color: black;\n  margin-left: 15px;\n  text-decoration: none;\n  display: inline-block;\n  position: relative;\n\n  ::after {\n    content: \"\";\n    position: absolute;\n    width: 100%;\n    transform: scaleX(0);\n    height: 2px;\n    bottom: 0;\n    left: 0;\n    background-color: rgba(102, 102, 255, 0.8);\n    transform-origin: bottom right;\n    transition: transform 0.4s cubic-bezier(0.86, 0, 0.07, 1);\n  }\n\n  :hover::after {\n    transform: scaleX(1);\n    transform-origin: bottom left;\n  }\n`\n\nconst HomeLink = styled(NavLink)`\n  margin-left: 0;\n`\n\nconst SiteHeader = styled.header`\n  background: transparent;\n  display: flex;\n  align-content: center;\n  justify-content: center;\n`\n\nconst Header = () => (\n  <SiteHeader>\n    <ThinContent>\n      <p>\n        <HomeLink to=\"/\">projects</HomeLink>\n        <NavLink to=\"/blog\">blog</NavLink>\n        <NavLink to=\"/psco\">psco</NavLink>\n        <NavLink to=\"/about\">about</NavLink>\n        <NavLink to=\"/about\">reading list</NavLink>\n      </p>\n    </ThinContent>\n  </SiteHeader>\n)\n\nconst Layout = styled.div`\n  margin: 0 auto;\n  max-width: 1600px;\n  padding: 0 1.0875rem 1rem;\n  padding-top: 0;\n`\n\n// gross\n\nconst Container = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-template-rows: repeat(3 1fr);\n  grid-gap: 5px;\n  border-top: solid rgb(102, 102, 255) 3px;\n`\n\nconst Col = styled.div`\n  margin-top: 10px;\n  margin-bottom: 10px;\n`\n\nconst ImgContainer = styled.div`\n  margin-top: 5px;\n  margin-bottom: 5px;\n`\n\nconst Head = styled.h1`\n  text-align: center;\n`\n\nconst Description = styled.div`\n  text-align: center;\n`\n\n// for parsing the response list of individual images\nconst regex = /\\[\"(https:\\/\\/lh3\\.googleusercontent\\.com\\/[a-zA-Z0-9\\-_]*)\"/g\n\n// proxy on the left hosted here\n\n// Calls the proxy on the left\nasync function getAlbum() {\n  const proxyUrl = \"https://psco-cors-proxy.vercel.app/\" // \"http://127.0.0.1:5000\"\n  const response = await fetch(`${proxyUrl}`).then(data => data.json())\n\n  console.log(\"array length: \", response, response.length)\n\n  return { data: response }\n}\n\nconst IndexPage = () => {\n  const [images, setImages] = React.useState(null)\n  React.useEffect(() => {\n    let shouldCancel = false\n\n    const call = async () => {\n      const res1 = await getAlbum()\n\n      if (!shouldCancel && res1.data && res1.data.length > 0) {\n        const response = { data: res1.data }\n        console.log(response)\n        if (response.data && response.data.length > 0) {\n          setImages(response.data.map(url => url))\n        }\n      }\n    }\n    call()\n\n    // return () => shouldCancel = true\n  }, [])\n\n  if (images) {\n    let reversed = images.slice().reverse()\n    const images_left = reversed.filter(function(value, index, Arr) {\n      return index % 3 === 0\n    })\n\n    const images_middle = reversed.filter(function(value, index, Arr) {\n      return index % 3 === 1\n    })\n\n    const images_right = reversed.filter(function(value, index, Arr) {\n      return index % 3 === 2\n    })\n\n    return (\n      <Layout>\n        <Header siteTitle=\"psco\" />\n        <SEO\n          title=\"psco\"\n          keywords={[`Graphics`, `Peter Murphy`, `blog`, `portfolio`, `design`]}\n        />\n        <Head>psco</Head>\n        <Description>\n          <p>\n            one too many times have i lost years of photos to a surprise phone\n            death\n          </p>\n          <p>\n            it's like having a gap in your resume but worse because it's your\n            life\n          </p>\n        </Description>\n        {/* <Lyric/> */}\n        <Container>\n          <Col>\n            {images_left.map(url => (\n              <ImgContainer>\n                <img\n                  id=\"image\"\n                  src={url}\n                  alt={\"\"}\n                  key={url}\n                  referrerPolicy=\"no-referrer\"\n                />\n              </ImgContainer>\n            ))}\n          </Col>\n\n          <Col>\n            {images_middle.map(url => (\n              <ImgContainer>\n                <img\n                  id=\"image\"\n                  src={url}\n                  alt={\"\"}\n                  key={url}\n                  referrerPolicy=\"no-referrer\"\n                />\n              </ImgContainer>\n            ))}\n          </Col>\n\n          <Col>\n            {images_right.map(url => (\n              <ImgContainer>\n                <img\n                  id=\"image\"\n                  src={url}\n                  alt={\"\"}\n                  key={url}\n                  referrerPolicy=\"no-referrer\"\n                />\n              </ImgContainer>\n            ))}\n          </Col>\n        </Container>\n      </Layout>\n    )\n  } else {\n    return (\n      <Layout>\n        <SEO\n          title=\"psco\"\n          keywords={[`Graphics`, `Peter Murphy`, `blog`, `portfolio`, `design`]}\n        />\n        <Head>psco</Head>\n        {/* <p>something about a bunch of dead dogs</p> */}\n        <div style={{ textAlign: \"center\" }}>\n          <InfinitySpin width=\"200\" color=\"#6666ff\" />\n        </div>\n        <Container>\n          <Col></Col>\n          <Col></Col>\n          <Col></Col>\n        </Container>\n      </Layout>\n    )\n  }\n}\n\nexport default IndexPage\n"],"sourceRoot":""}